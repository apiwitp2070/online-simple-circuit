{"version":3,"sources":["components/node/nodeStyle.ts","components/node/portTemplate.ts","components/main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ICshapeStyle","name","fill","desiredSize","go","nodeEllipse","twoWayLineA","stroke","twoWayLineB","FromBottom","input","fromSpot","Bottom","fromLinkable","toSpot","Top","toLinkable","toMaxLinks","cursor","FromTop","InoutPort","Right","Left","SwitchLeft","SwitchRight","count","initDiagram","red","green","black","KAPPA","Math","sqrt","$","make","diagram","WheelZoom","addDiagramListener","e","idx","document","title","indexOf","isModified","substr","palette","palette2","grid","visible","Grid","gridCellSize","defineFigureGenerator","shape","w","h","add","Bezier","close","setSpots","linkTemplate","routing","AvoidsNodes","curve","JumpOver","corner","relinkableFrom","relinkableTo","selectionAdorned","shadowOffset","shadowBlur","shadowColor","ofObject","strokeWidth","parameter1","ofModel","model","linkFromPortIdProperty","linkToPortIdProperty","sharedToolTip","margin","d","category","nodeStyle","parse","makeTwoWay","stringify","toolTip","inputTemplate","portId","alignment","doubleClick","obj","startTransaction","shp","findObject","updateStates","commitTransaction","outputTemplate","clkTemplate","text","andTemplate","orTemplate","xorTemplate","norTemplate","xnorTemplate","nandTemplate","notTemplate","dffTemplate","ledRedTemplate","ledYellowTemplate","ledGreenTemplate","resistorTemplate","switchTemplate","angle","opacity","lineA","lineC","twoWaySwitchATemplate","lineB","twoWaySwitchBTemplate","sevenSegmentTemplate","oldskip","skipsUndoManager","nodes","each","node","setOutputLinks","doInput","doClk","getinput10","setvalue","doAnd","doOr","doXor","getvalue","getinput8","doNot","doNand","doNor","doXnor","getinputdff","doDff","getinput7seg","do7seg","linksConnected","link","doOutput","stat","doSwitch","do2SwitchA","in1","in2","do2SwitchB","doResistor","gnd","doLEDgreen","doLEDyellow","doLEDred","color","findLinksOutOf","pid","value","findLinksInto","val","nodeTemplateMap","nodeDataArray","loop","setTimeout","Main","useEffect","className","id","divClassName","style","height","type","checked","htmlFor","App","exact","path","component","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uOAQO,SAASA,IACd,MAAO,CACLC,KAAM,YACNC,KAAM,QACNC,YAAa,IAAIC,OAAQ,IAAK,KAK1B,SAASC,IACf,MAAO,CACLH,KAAM,OACNC,YAAa,IAAIC,OAAQ,EAAG,KAiHzB,SAASE,IACd,MAAO,CACLL,KAAM,IACNM,OAAQ,QACRL,KAAM,QACNC,YAAa,IAAIC,OAAQ,EAAE,KAIxB,SAASI,IACd,MAAO,CACLP,KAAM,IACNM,OAAQ,QACRL,KAAM,QACNC,YAAa,IAAIC,OAAQ,EAAE,KC1IxB,SAASK,EAAWC,GACzB,MAAO,CACLP,YAAa,IAAIC,OAAQ,EAAG,GAC5BF,KAAM,UACNS,SAAUP,OAAQQ,OAClBC,cAAeH,EACfI,OAAQV,OAAQW,IAChBC,WAAYN,EACZO,WAAY,EACZC,OAAQ,WAKL,SAASC,EAAQT,GACtB,MAAO,CACLP,YAAa,IAAIC,OAAQ,EAAG,GAC5BF,KAAM,UACNS,SAAUP,OAAQW,IAClBF,cAAeH,EACfI,OAAQV,OAAQQ,OAChBI,WAAYN,EACZO,WAAY,EACZC,OAAQ,WAKL,SAASE,EAAUV,GACxB,MAAO,CACLP,YAAa,IAAIC,OAAQ,EAAG,GAC5BF,KAAM,UACNS,SAAUP,OAAQiB,MAClBR,cAAeH,EACfI,OAAQV,OAAQkB,KAChBN,WAAYN,EACZO,WAAY,EACZC,OAAQ,WAKL,SAASK,IACd,MAAO,CACLpB,YAAa,IAAIC,OAAQ,EAAG,GAC5BF,KAAM,UACNS,SAAUP,OAAQkB,KAClBT,cAAc,EACdC,OAAQV,OAAQkB,KAChBN,YAAY,EACZC,WAAY,EACZC,OAAQ,WAIL,SAASM,IACd,MAAO,CACLrB,YAAa,IAAIC,OAAQ,EAAG,GAC5BF,KAAM,UACNS,SAAUP,OAAQiB,MAClBR,cAAc,EACdC,OAAQV,OAAQiB,MAChBL,YAAY,EACZC,WAAY,EACZC,OAAQ,W,WC/DRO,EAAM,EAGV,SAASC,IAGP,IAAIC,EAAM,YACNC,EAAQ,cACRC,EAAQ,QACRC,GAAcC,KAAKC,KAAK,GAAK,GAAK,EAA1B,EAGNC,EAAI7B,cAAe8B,KAEnBC,EACJF,EAAE7B,UACA,CACE,iCAAkCA,cAAegC,UACjD,kCAAkC,EAClC,yBAAyB,EACzB,aAAgB,MAItBD,EAAQE,mBAAmB,YAAY,SAASC,GAC9C,IAAIC,EAAMC,SAASC,MAAMC,QAAQ,KAC7BP,EAAQQ,WACNJ,EAAM,IAAGC,SAASC,OAAS,KAE3BF,GAAO,IAAGC,SAASC,MAAQD,SAASC,MAAMG,OAAO,EAAGL,OAK5D,IAAIM,EAAU,IAAIzC,UAAW,WACzB0C,EAAW,IAAI1C,UAAW,YAG9B+B,EAAQY,KAAKC,SAAU,EACvBb,EAAQY,KACRd,EAAE7B,QAAUA,QAAS6C,KACnB,CAAEC,aAAc,IAAI9C,OAAQ,GAAI,KAChC6B,EAAE7B,QAAU,QAAS,CAAEG,OAAQ,cAC/B0B,EAAE7B,QAAU,QAAS,CAAEG,OAAQ,eAGjCH,QAAS+C,sBAAsB,eAAe,SAASC,EAAOC,EAAGC,GAC/D,OAAO,IAAIlD,YACRmD,IAAI,IAAInD,aAAc,EAAG,GAAG,GAC5BmD,IAAI,IAAInD,cAAeA,cAAeoD,OAAQH,EAAG,GAAKC,EAAGxB,EAAQuB,EAAG,EAAGA,GAAI,GAAKvB,EAAQ,GAAKwB,IAC7FC,IAAI,IAAInD,cAAeA,cAAeoD,OAAQ,EAAGF,EAAGD,GAAI,GAAKvB,EAAQ,GAAKwB,EAAGxB,EAAQuB,EAAGC,GAAGG,UAC3FC,SAAS,EAAG,KAAO,KAAO,SAK/BvB,EAAQwB,aACN1B,EAAE7B,OACA,CACEwD,QAASxD,OAAQyD,YACjBC,MAAO1D,OAAQ2D,SACfC,OAAQ,EACRC,gBAAgB,EAAMC,cAAc,EACpCC,kBAAkB,EAClBC,aAAc,IAAIhE,QAAS,EAAG,GAAIiE,WAAY,EAAGC,YAAa,QAEhE,IAAIlE,UAAW,aAAc,cAAcmE,WAC3CtC,EAAE7B,QACA,CAAEH,KAAM,QAASuE,YAAa,EAAGjE,OAAQoB,EAAM8C,WAAY,IAAK,IAAIrE,UAAW,SAAU,SAASsE,UAAW,IAAItE,UAAW,aAAc,UAGhJ+B,EAAQwC,MACN1C,EAAE7B,kBACA,CAAEwE,uBAAwB,WACxBC,qBAAsB,WAI5B,IAAIC,EACF7C,EAAE,UACA,CAAE,gBAAiB,oBACnBA,EAAE7B,YAAc,CAAE2E,OAAQ,GACxB,IAAI3E,UAAW,OAAQ,IAAI,SAAS4E,GAAK,OAAOA,EAAEC,cAIxD,SAASC,IACP,MAAO,CAAC,IAAI9E,UAAW,WAAY,MAAOA,QAAS+E,OAAOC,WAAWhF,QAASiF,WAC9E,IAAIjF,UAAW,aAAc,cAAcmE,WAC3C,CACEJ,kBAAkB,EAClBC,aAAc,IAAIhE,QAAS,EAAG,GAC9BiE,WAAY,GACZC,YAAa,OACbgB,QAASR,IAMb,IAAIS,EACFtD,EAAE7B,OAAS,OAAQ8E,IACjBjD,EAAE7B,QAAU,SAAUJ,IACpB,CAAEE,KAAMyB,IACVM,EAAE7B,QAAU,YAAagB,GAAU,GACjC,CAAEoE,OAAQ,GAAIC,UAAW,IAAIrF,OAAQ,GAAK,KAAQ,IAAIA,UAAW,OAAQ,SAASsE,WACpF,CACEgB,YAAa,SAASpD,EAAGqD,GACvBrD,EAAEH,QAAQyD,iBAAiB,gBAC3B,IAAIC,EAAMF,EAAIG,WAAW,aACzBD,EAAI3F,KAAQ2F,EAAI3F,OAAS0B,EAASD,EAAMC,EACxCmE,IACAzD,EAAEH,QAAQ6D,kBAAkB,mBAKhCC,EACFhE,EAAE7B,OAAS,OAAQ8E,IACjBjD,EAAE7B,QAAU,SAAUJ,IACpB,CAAEE,KAAM,SACV+B,EAAE7B,QAAU,YAAagB,GAAU,GACjC,CAAEoE,OAAQ,GAAIC,UAAW,IAAIrF,OAAQ,EAAG,KAAO,IAAIA,UAAW,OAAQ,SAASsE,YAGjFwB,EACFjE,EAAE7B,OAAS,OAAQ8E,IACjBjD,EAAE7B,QAAU,YAAaJ,IACvB,CAAEE,KAAMyB,IACVM,EAAE7B,QAAU,YAAagB,GAAU,GACjC,CAAEoE,OAAQ,GAAIC,UAAW,IAAIrF,OAAQ,KAAM,KAAQ,IAAIA,UAAW,OAAQ,SAASsE,WACrFzC,EAAE7B,YAAc,CAAE+F,KAAM,eAAgB5F,OAAQ,WAGhD6F,EACFnE,EAAE7B,OAAS,OAAQ8E,IACjBjD,EAAE7B,QAAU,YAAaJ,KACzBiC,EAAE7B,QAAU,cAAeC,IACzB,CAAEoF,UAAW,IAAIrF,OAAQ,IAAM,MACjC6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,YAAc,CAAE+F,KAAM,WAAY5F,OAAQ,WAG5C8F,EACApE,EAAE7B,OAAS,OAAQ8E,IACnBjD,EAAE7B,QAAU,YAAaJ,KACzBiC,EAAE7B,QAAU,cAAeC,IACzB,CAAEoF,UAAW,IAAIrF,OAAQ,IAAM,MACjC6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,YAAc,CAAE+F,KAAM,UAAW5F,OAAQ,WAG3C+F,EACArE,EAAE7B,OAAS,OAAQ8E,IACnBjD,EAAE7B,QAAU,YAAaJ,KACzBiC,EAAE7B,QAAU,cAAeC,IACzB,CAAEoF,UAAW,IAAIrF,OAAQ,IAAM,MACjC6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,YAAc,CAAE+F,KAAM,WAAY5F,OAAQ,WAG5CgG,EACFtE,EAAE7B,OAAS,OAAQ8E,IACnBjD,EAAE7B,QAAU,YAAaJ,KACzBiC,EAAE7B,QAAU,cAAeC,IACzB,CAAEoF,UAAW,IAAIrF,OAAQ,IAAM,MACjC6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,YAAc,CAAE+F,KAAM,WAAY5F,OAAQ,WAG1CiG,EACFvE,EAAE7B,OAAS,OAAQ8E,IACnBjD,EAAE7B,QAAU,YAAaJ,KACzBiC,EAAE7B,QAAU,cAAeC,IACzB,CAAEoF,UAAW,IAAIrF,OAAQ,IAAM,MACjC6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,YAAc,CAAE+F,KAAM,aAAc5F,OAAQ,WAG5CkG,EACFxE,EAAE7B,OAAS,OAAQ8E,IACnBjD,EAAE7B,QAAU,YAAaJ,KACzBiC,EAAE7B,QAAU,cAAeC,IACzB,CAAEoF,UAAW,IAAIrF,OAAQ,IAAM,MACjC6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,YAAc,CAAE+F,KAAM,YAAa5F,OAAQ,WAG3CmG,EACFzE,EAAE7B,OAAS,OAAQ8E,IACnBjD,EAAE7B,QAAU,YAAaJ,KACzBiC,EAAE7B,QAAU,cAAeC,IACzB,CAAEoF,UAAW,IAAIrF,OAAQ,IAAM,MACjC6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,YAAc,CAAE+F,KAAM,WAAY5F,OAAQ,WAG1CoG,EACF1E,EAAE7B,OAAS,OAAQ8E,IACnBjD,EAAE7B,QAAU,YAAaJ,KACzBiC,EAAE7B,QAAU,cAAeC,IACzB,CAAEoF,UAAW,IAAIrF,OAAQ,IAAM,MACjC6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,IAAM,KACnD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,IAAM,KAClD6B,EAAE7B,YAAc,CAAE+F,KAAM,WAAY5F,OAAQ,WAG1CqG,EACF3E,EAAE7B,OAAS,OAAQ8E,IACnBjD,EAAE7B,QAAU,YFzZP,CACLH,KAAM,UACNC,KAAM,OACNC,YAAa,IAAIC,OAAQ,GAAI,MEuZ7B6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,YAAc,CAAE+F,KAAM,MAAO5F,OAAQ,WAGrCsG,EACF5E,EAAE7B,OAAS,OAAQ8E,IACnBjD,EAAE7B,QAAU,YFnZP,CACLH,KAAM,aACNC,KAAM,OACNC,YAAa,IAAIC,OAAQ,GAAI,MEiZ7B6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,YAAc,CAAE+F,KAAM,MAAO5F,OAAQ,WAGrCuG,EACF7E,EAAE7B,OAAS,OAAQ8E,IACnBjD,EAAE7B,QAAU,YFraP,CACLH,KAAM,YACNC,KAAM,OACNC,YAAa,IAAIC,OAAQ,GAAI,MEma7B6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KACjD6B,EAAE7B,YAAc,CAAE+F,KAAM,MAAO5F,OAAQ,WAGrCwG,EACF9E,EAAE7B,OAAS,OAAQ8E,IACjBjD,EAAE7B,QAAU,mBF/ZT,CACLF,KAAM,UACNC,YAAa,IAAIC,OAAQ,GAAI,ME8Z3B6B,EAAE7B,QAAU,YAAagB,GAAU,GACjC,CAAEoE,OAAQ,KAAMC,UAAW,IAAIrF,OAAQ,EAAG,MAC5C6B,EAAE7B,QAAU,YAAagB,GAAU,GACjC,CAAEoE,OAAQ,MAAOC,UAAW,IAAIrF,OAAQ,EAAG,MAC7C6B,EAAE7B,QAAU,CAACF,KAAM,QAASC,YAAa,IAAIC,OAAQ,EAAG,IAAKqF,UAAW,IAAIrF,OAAQ,GAAK,MACzF6B,EAAE7B,QAAU,CAACF,KAAM,QAASC,YAAa,IAAIC,OAAQ,EAAG,IAAKqF,UAAW,IAAIrF,OAAQ,GAAK,MACzF6B,EAAE7B,QAAU,CAACF,KAAM,SAAUC,YAAa,IAAIC,OAAQ,EAAG,IAAKqF,UAAW,IAAIrF,OAAQ,GAAK,MAC1F6B,EAAE7B,QAAU,CAACF,KAAM,UAAWC,YAAa,IAAIC,OAAQ,EAAG,IAAKqF,UAAW,IAAIrF,OAAQ,GAAK,OAG3F4G,EACF/E,EAAE7B,OAAS,OAAQ8E,IACjBjD,EAAE7B,QAAU,SAAUJ,KACtBiC,EAAE7B,QAAU,YAAagB,GAAU,GACjC,CAAEoE,OAAQ,KAAMC,UAAW,IAAIrF,OAAQ,EAAG,MAC5C6B,EAAE7B,QAAU,YAAagB,GAAU,GACjC,CAAEoE,OAAQ,MAAOC,UAAW,IAAIrF,OAAQ,GAAK,MAC/C6B,EAAE7B,QAAUE,IAAe,CAAEmF,UAAW,IAAIrF,OAAQ,GAAK,KAAO6G,MAAO,KACvEhF,EAAE7B,QF3UC,CACLH,KAAM,IACNM,OAAQ,QACRL,KAAM,QACNC,YAAa,IAAIC,OAAQ,EAAE,KEuUE,CAAEqF,UAAW,IAAIrF,OAAQ,GAAK,IAAM6G,MAAO,GAAIC,QAAS,IACnF,CACExB,YAAa,SAASpD,EAAGqD,GACvBrD,EAAEH,QAAQyD,iBAAiB,iBAC3B,IAAIuB,EAAQxB,EAAIG,WAAW,KACvBsB,EAAQzB,EAAIG,WAAW,KAC3BqB,EAAMD,QAA4B,GAAjBC,EAAMD,QAAgB,EAAI,EAC3CE,EAAMF,QAA4B,GAAjBE,EAAMF,QAAgB,EAAI,EAC3CnB,IACAzD,EAAEH,QAAQ6D,kBAAkB,oBAIhCqB,EACFpF,EAAE7B,OAAS,OAAQ8E,IACjBjD,EAAE7B,QAAU,SAAUJ,KACtBiC,EAAE7B,QAAU,YAAaoB,IACvB,CAAEgE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,MACjD6B,EAAE7B,QAAU,YAAaoB,IACvB,CAAEgE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,MACjD6B,EAAE7B,QAAU,YAAamB,IACvB,CAAEiE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,EAAG,MAC/C6B,EAAE7B,QAAUE,IAAe,CAAEmF,UAAW,IAAIrF,OAAQ,GAAK,KAAO6G,OAAQ,KACxEhF,EAAE7B,QAAUI,IAAe,CAAEiF,UAAW,IAAIrF,OAAQ,GAAK,KAAO6G,MAAO,GAAIC,QAAS,IACpF,CACExB,YAAa,SAASpD,EAAGqD,GACvBrD,EAAEH,QAAQyD,iBAAiB,iBAC3B,IAAIuB,EAAQxB,EAAIG,WAAW,KACvBwB,EAAQ3B,EAAIG,WAAW,KAC3BqB,EAAMD,QAA4B,GAAjBC,EAAMD,QAAgB,EAAI,EAC3CI,EAAMJ,QAA4B,GAAjBI,EAAMJ,QAAgB,EAAI,EAC3CnB,IACAzD,EAAEH,QAAQ6D,kBAAkB,oBAIhCuB,EACFtF,EAAE7B,OAAS,OAAQ8E,IACjBjD,EAAE7B,QAAU,SAAUJ,KACtBiC,EAAE7B,QAAU,YAAamB,IACvB,CAAEiE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,EAAG,MAC/C6B,EAAE7B,QAAU,YAAamB,IACvB,CAAEiE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,EAAG,MAC/C6B,EAAE7B,QAAU,YAAaoB,IACvB,CAAEgE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,MACjD6B,EAAE7B,QAAUE,IAAe,CAAEmF,UAAW,IAAIrF,OAAQ,GAAK,KAAO6G,OAAQ,KACxEhF,EAAE7B,QAAUI,IAAe,CAAEiF,UAAW,IAAIrF,OAAQ,GAAK,KAAO6G,MAAO,GAAIC,QAAS,IACpF,CACExB,YAAa,SAASpD,EAAGqD,GACvBrD,EAAEH,QAAQyD,iBAAiB,iBAC3B,IAAIuB,EAAQxB,EAAIG,WAAW,KACvBwB,EAAQ3B,EAAIG,WAAW,KAC3BqB,EAAMD,QAA4B,GAAjBC,EAAMD,QAAgB,EAAI,EAC3CI,EAAMJ,QAA4B,GAAjBI,EAAMJ,QAAgB,EAAI,EAC3CnB,IACAzD,EAAEH,QAAQ6D,kBAAkB,oBAIhCwB,EACFvF,EAAE7B,OAAS,OAAQ8E,IACjBjD,EAAE7B,QAAU,YFxeT,CACLF,KAAM,QACNC,YAAa,IAAIC,OAAQ,IAAK,OEue5B6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KAC/C6B,EAAE7B,QAAU,YFtaX,CACLH,KAAM,IACNM,OAAQ,QACRL,KAAM,QACNC,YAAa,IAAIC,OAAQ,EAAG,KEmatB,CAAE6G,MAAO,GAAIxB,UAAW,IAAIrF,OAAQ,GAAK,MAC7C6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KAC/C6B,EAAE7B,QAAU,YFnbX,CACLH,KAAM,IACNM,OAAQ,QACRL,KAAM,QACNC,YAAa,IAAIC,OAAQ,EAAG,KEgbtB,CAAEqF,UAAW,IAAIrF,OAAQ,GAAK,MAClC6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,UAAWC,UAAW,IAAIrF,OAAQ,GAAK,KACnD6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KAC/C6B,EAAE7B,QAAU,YFteX,CACLH,KAAM,IACNM,OAAQ,QACRL,KAAM,QACNC,YAAa,IAAIC,OAAQ,EAAG,KEmetB,CAAE6G,MAAO,GAAIxB,UAAW,IAAIrF,OAAQ,GAAK,MAC7C6B,EAAE7B,QAAU,YAAaK,GAAW,GAClC,CAAE+E,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KAC/C6B,EAAE7B,QAAU,YFjeX,CACLH,KAAM,IACNM,OAAQ,QACRL,KAAM,QACNC,YAAa,IAAIC,OAAQ,EAAG,KE8dtB,CAAEqF,UAAW,IAAIrF,OAAQ,GAAK,MAClC6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KAC/C6B,EAAE7B,QAAU,YF1cX,CACLH,KAAM,IACNM,OAAQ,QACRL,KAAM,QACNC,YAAa,IAAIC,OAAQ,EAAG,KEuctB,CAAEqF,UAAW,IAAIrF,OAAQ,GAAK,MAClC6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KAC/C6B,EAAE7B,QAAU,YFvdX,CACLH,KAAM,IACNM,OAAQ,QACRL,KAAM,QACNC,YAAa,IAAIC,OAAQ,EAAG,KEodtB,CAAE6G,MAAO,GAAIxB,UAAW,IAAIrF,OAAQ,GAAK,MAC7C6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,UAAWC,UAAW,IAAIrF,OAAQ,GAAK,KACnD6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,QAASC,UAAW,IAAIrF,OAAQ,GAAK,KAC/C6B,EAAE7B,QAAU,YFteX,CACLH,KAAM,IACNM,OAAQ,QACRL,KAAM,QACNC,YAAa,IAAIC,OAAQ,EAAG,KEmetB,CAAEqF,UAAW,IAAIrF,OAAQ,GAAK,MAClC6B,EAAE7B,QAAU,YAAae,GAAQ,GAC/B,CAAEqE,OAAQ,SAAUC,UAAW,IAAIrF,OAAQ,GAAK,KAClD6B,EAAE7B,QAAU,SACV,CAAEH,KAAK,KAAKE,YAAa,IAAIC,OAAQ,GAAI,IAAKG,OAAQ,QAASL,KAAM,QAASuF,UAAW,IAAIrF,OAAQ,IAAM,OAkEjH,SAAS2F,IACP,IAAI0B,EAAUtF,EAAQuF,iBACtBvF,EAAQuF,kBAAmB,EAE3BvF,EAAQwF,MAAMC,MAAK,SAASC,GACJ,UAAlBA,EAAK5C,UA2Cb,SAAiB4C,GACfC,EAAeD,EAAMA,EAAK/B,WAAW,aAAa5F,MA3C9C6H,CAAQF,MAIZ1F,EAAQwF,MAAMC,MAAK,SAASC,GAC1B,OAAQA,EAAK5C,UACX,IAAK,OA0LX,SAAe4C,GACVpG,EAAM,IAAI,IACRoG,EAAK/B,WAAW,aAAa5F,OAAO0B,EACrCiG,EAAK/B,WAAW,aAAa5F,KAAKyB,EAGlCkG,EAAK/B,WAAW,aAAa5F,KAAK0B,EAEpCkG,EAAeD,EAAMA,EAAK/B,WAAW,aAAa5F,OAlMpC8H,CAAMH,GAAO,MACzB,IAAK,OAsMX,SAAeA,GACb,IAAInH,EAAQuH,EAAWJ,GAEpBnH,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,IAE7BlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,SAASjG,GAC5DsG,EAASL,EAAK,SAASlG,GAEzBjB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQjG,GAC3DsG,EAASL,EAAK,QAAQlG,GAExBjB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQjG,GAC3DsG,EAASL,EAAK,QAAQlG,GAExBjB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQjG,GAC3DsG,EAASL,EAAK,QAAQlG,IArNbwG,CAAMN,GAAO,MACzB,IAAK,MAyQX,SAAcA,GACZ,IAAInH,EAAQuH,EAAWJ,GAEpBnH,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,IAE7BlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,SAASjG,GAC5DsG,EAASL,EAAK,SAASlG,GAEzBjB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQjG,GAC3DsG,EAASL,EAAK,QAAQlG,GAExBjB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQjG,GAC3DsG,EAASL,EAAK,QAAQlG,GAExBjB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQjG,GAC3DsG,EAASL,EAAK,QAAQlG,IAxRdyG,CAAKP,GAAO,MACvB,IAAK,OAiTX,SAAeA,GACb,IAAInH,EAAQuH,EAAWJ,GAEpBnH,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,IAE7BlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,SAASlG,GAC9DjB,EAAM,KAAKkB,GAASlB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,SAASjG,GAC5DlB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,SAASjG,GAC5DlB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,SAASlG,GAE1DjB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,QAAQlG,GAC7DjB,EAAM,KAAKkB,GAASlB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,QAAQjG,GAC3DlB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,QAAQjG,GAC3DlB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,QAAQlG,GAEzDjB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,QAAQlG,GAC7DjB,EAAM,KAAKkB,GAASlB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,QAAQjG,GAC3DlB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,QAAQjG,GAC3DlB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,QAAQlG,GAEzDjB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,QAAQlG,GAC7DjB,EAAM,KAAKkB,GAASlB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,QAAQjG,GAC3DlB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,QAAQjG,GAC3DlB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,QAAQlG,IAxU9C0G,CAAMR,GAAO,MACzB,IAAK,OA4OX,SAAeA,GACb,IAAInH,EAzFN,SAAmBmH,GACjB,IAAInH,EAAQ,CAACiB,EAAIA,EAAIA,EAAIA,EAAIA,EAAIA,EAAIA,EAAIA,GAYzC,OAVAjB,EAAM,GAAK4H,EAAST,EAAK,UACzBnH,EAAM,GAAK4H,EAAST,EAAK,UACzBnH,EAAM,GAAK4H,EAAST,EAAK,UACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SAGlBnH,EA4EK6H,CAAUV,GAEnBnH,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,IAE7BlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,SAASlG,GACxCuG,EAASL,EAAK,SAASjG,GAEzBlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,SAASlG,GACxCuG,EAASL,EAAK,SAASjG,GAEzBlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQlG,GACvCuG,EAASL,EAAK,QAAQjG,GAExBlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQlG,GACvCuG,EAASL,EAAK,QAAQjG,GAExBlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQlG,GACvCuG,EAASL,EAAK,QAAQjG,GAExBlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQlG,GACvCuG,EAASL,EAAK,QAAQjG,IAjQb4G,CAAMX,GAAO,MACzB,IAAK,QAuNX,SAAgBA,GACd,IAAInH,EAAQuH,EAAWJ,GAEpBnH,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,IAE7BlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,SAASlG,GAC5DuG,EAASL,EAAK,SAASjG,GAEzBlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQlG,GAC3DuG,EAASL,EAAK,QAAQjG,GAExBlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQlG,GAC3DuG,EAASL,EAAK,QAAQjG,GAExBlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQlG,GAC3DuG,EAASL,EAAK,QAAQjG,IAtOZ6G,CAAOZ,GAAO,MAC3B,IAAK,OAyRX,SAAeA,GACb,IAAInH,EAAQuH,EAAWJ,GAEpBnH,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,IAE7BlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,SAASlG,GAC5DuG,EAASL,EAAK,SAASjG,GAEzBlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQlG,GAC3DuG,EAASL,EAAK,QAAQjG,GAExBlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQlG,GAC3DuG,EAASL,EAAK,QAAQjG,GAExBlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQlG,GAC3DuG,EAASL,EAAK,QAAQjG,IAxSb8G,CAAMb,GAAO,MACzB,IAAK,QAuUX,SAAgBA,GACd,IAAInH,EAAQuH,EAAWJ,GAEpBnH,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,IAE7BlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,SAASjG,GAC9DlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,SAASlG,GAC5DjB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,SAASlG,GAC5DjB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,SAASjG,GAE1DlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,QAAQjG,GAC7DlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,QAAQlG,GAC3DjB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,QAAQlG,GAC3DjB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,QAAQjG,GAEzDlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,QAAQjG,GAC7DlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,QAAQlG,GAC3DjB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,QAAQlG,GAC3DjB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,QAAQjG,GAEzDlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,QAAQjG,GAC7DlB,EAAM,KAAKkB,GAASlB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,QAAQlG,GAC3DjB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKkB,GAAQsG,EAASL,EAAK,QAAQlG,GAC3DjB,EAAM,KAAKiB,GAAOjB,EAAM,KAAKiB,GAAMuG,EAASL,EAAK,QAAQjG,IA9V7C+G,CAAOd,GAAO,MAC3B,IAAK,OAmYX,SAAeA,GACb,IAAInH,EApON,SAAqBmH,GACnB,IAAInH,EAAQ,CAACiB,EAAIA,EAAIA,EAAIA,EAAIA,EAAIA,EAAIA,EAAIA,EAAIA,EAAIA,GAcjD,OAZAjB,EAAM,GAAK4H,EAAST,EAAK,UACzBnH,EAAM,GAAK4H,EAAST,EAAK,UACzBnH,EAAM,GAAK4H,EAAST,EAAK,UACzBnH,EAAM,GAAK4H,EAAST,EAAK,UACzBnH,EAAM,GAAK4H,EAAST,EAAK,UACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SAGlBnH,EAqNKkI,CAAYf,GAKrBnH,EAAM,KAAKkB,GAASlB,EAAM,KAAKkB,IAE7BlB,EAAM,KAAKkB,GACZsG,EAASL,EAAK,QAAQlG,GACtBuG,EAASL,EAAK,QAAQjG,IAEhBlB,EAAM,KAAKkB,GACjBsG,EAASL,EAAK,QAAQjG,GACtBsG,EAASL,EAAK,QAAQlG,IAEhBjB,EAAM,KAAKkB,IAEdlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQjG,GACtCsG,EAASL,EAAK,QAAQlG,GAEzBjB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQlG,GACvCuG,EAASL,EAAK,QAAQjG,IAW1BlB,EAAM,KAAKkB,GACZsG,EAASL,EAAK,QAAQlG,GACtBuG,EAASL,EAAK,QAAQjG,IAEhBlB,EAAM,KAAKkB,GACjBsG,EAASL,EAAK,QAAQjG,GACtBsG,EAASL,EAAK,QAAQlG,IAEhBjB,EAAM,KAAKkB,IAEdlB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQjG,GACtCsG,EAASL,EAAK,QAAQlG,GAEzBjB,EAAM,KAAKkB,EAAQsG,EAASL,EAAK,QAAQlG,GACvCuG,EAASL,EAAK,QAAQjG,KAlbfiH,CAAMhB,GAAO,MACzB,IAAK,gBAiXX,SAAgBA,GACd,IAAInH,EAlBN,SAAsBmH,GACpB,IAAInH,EAAQ,CAACmB,EAAMA,EAAMA,EAAMA,EAAMA,EAAMA,EAAMA,EAAMA,EAAMA,EAAMA,GAanE,OAXAnB,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,WACzBnH,EAAM,GAAK4H,EAAST,EAAK,WACzBnH,EAAM,GAAK4H,EAAST,EAAK,UAElBnH,EAIKoI,CAAajB,GAEtBnH,EAAM,IAAIkB,GAASlB,EAAM,IAAIkB,IAE1BlB,EAAM,IAAIkB,EAAQiG,EAAK/B,WAAW,KAAK5F,KAAKyB,EAAWkG,EAAK/B,WAAW,KAAK5F,KAAK2B,EACjFnB,EAAM,IAAIkB,EAAQiG,EAAK/B,WAAW,KAAK5F,KAAKyB,EAAWkG,EAAK/B,WAAW,KAAK5F,KAAK2B,EACjFnB,EAAM,IAAIkB,EAAQiG,EAAK/B,WAAW,KAAK5F,KAAKyB,EAAWkG,EAAK/B,WAAW,KAAK5F,KAAK2B,EACjFnB,EAAM,IAAIkB,EAAQiG,EAAK/B,WAAW,KAAK5F,KAAKyB,EAAWkG,EAAK/B,WAAW,KAAK5F,KAAK2B,EACjFnB,EAAM,IAAIkB,EAAQiG,EAAK/B,WAAW,KAAK5F,KAAKyB,EAAWkG,EAAK/B,WAAW,KAAK5F,KAAK2B,EACjFnB,EAAM,IAAIkB,EAAQiG,EAAK/B,WAAW,KAAK5F,KAAKyB,EAAWkG,EAAK/B,WAAW,KAAK5F,KAAK2B,EACjFnB,EAAM,IAAIkB,EAAQiG,EAAK/B,WAAW,KAAK5F,KAAKyB,EAAWkG,EAAK/B,WAAW,KAAK5F,KAAK2B,EACjFnB,EAAM,IAAIkB,EAAQiG,EAAK/B,WAAW,MAAM5F,KAAKyB,EAAWkG,EAAK/B,WAAW,MAAM5F,KAAK2B,GA7XhEkH,CAAOlB,GAAO,MACnC,IAAK,UAybX,SAAkBA,GAGhBA,EAAKmB,eAAepB,MAAK,SAASqB,GAAYpB,EAAK/B,WAAW,aAAa5F,KAAO+I,EAAKnD,WAAW,SAASvF,UA5bxF2I,CAASrB,GAAO,MAC/B,IAAK,UA6BX,SAAkBA,GAChB,IAAIsB,EAAMtB,EAAK/B,WAAW,KAAKoB,QAC3BxG,EAAO4H,EAAST,EAAK,MAEvBK,EAASL,EAAK,MADP,GAANsB,EACmBzI,EAGAiB,GApCHyH,CAASvB,GAAO,MAC/B,IAAK,QAuCX,SAAoBA,GAClB,IAAIsB,EAAMtB,EAAK/B,WAAW,KAAKoB,QAC3BxG,EAAQ4H,EAAST,EAAK,SACjB,GAANsB,GACDjB,EAASL,EAAK,QAAQnH,GACtBwH,EAASL,EAAK,QAAQlG,KAGtBuG,EAASL,EAAK,QAAQlG,GACtBuG,EAASL,EAAK,QAAQnH,IAhDP2I,CAAWxB,GAAO,MAC/B,IAAK,QAmDX,SAAoBA,GAClB,IAAIsB,EAAMtB,EAAK/B,WAAW,KAAKoB,QAC3BoC,EAAMhB,EAAST,EAAK,SACpB0B,EAAMjB,EAAST,EAAK,SAEtBK,EAASL,EAAK,QADP,GAANsB,EACqBI,EAGAD,GA3DPE,CAAW3B,GAAO,MAC/B,IAAK,YA8DX,SAAoBA,GAClB,IAAInH,EAAQ4H,EAAST,EAAK,MAC1BK,EAASL,EAAK,MAAMnH,GAhEE+I,CAAW5B,GAAO,MACpC,IAAK,aAkEX,SAAoBA,GAClB,IAAInH,EAAQ4H,EAAST,EAAK,SACtB6B,EAAMpB,EAAST,EAAK,SAEtBA,EAAK/B,WAAW,aAAa5F,KAD5BQ,GAAOkB,GAAS8H,GAAK9H,EACcA,EAGA,OAzEf+H,CAAW9B,GAAO,MACrC,IAAK,cA4EX,SAAqBA,GACnB,IAAInH,EAAQ4H,EAAST,EAAK,SACtB6B,EAAMpB,EAAST,EAAK,SAEtBA,EAAK/B,WAAW,cAAc5F,KAD7BQ,GAAOkB,GAAS8H,GAAK9H,EACe,SAGA,OAnFhBgI,CAAY/B,GAAO,MACtC,IAAK,WAsFX,SAAkBA,GAChB,IAAInH,EAAQ4H,EAAST,EAAK,SACtB6B,EAAMpB,EAAST,EAAK,SAEtBA,EAAK/B,WAAW,WAAW5F,KAD1BQ,GAAOkB,GAAS8H,GAAK9H,EACYD,EAGA,OA7FhBkI,CAAShC,OAI7B1F,EAAQuF,iBAAmBD,EAO7B,SAASK,EAAeD,EAAUiC,GAChCjC,EAAKkC,iBAAiBnC,MAAK,SAASqB,GAAYA,EAAKnD,WAAW,SAASvF,OAASuJ,KAsFpF,SAASxB,EAAST,EAASmC,GACzB,IAAIC,EAEJ,OADApC,EAAKqC,cAAcF,GAAKpC,MAAM,SAASqB,GAAWgB,EAAMhB,EAAKnD,WAAW,SAASvF,UAC1E0J,EAST,SAAS/B,EAASL,EAASmC,EAAQG,GACjCtC,EAAKkC,eAAeC,GAAKpC,MAAM,SAASqB,GAAWA,EAAKnD,WAAW,SAASvF,OAAO4J,KAOrF,SAASlC,EAAWJ,GAClB,IAAInH,EAAQ,CAACiB,EAAIA,EAAIA,EAAIA,EAAIA,EAAIA,EAAIA,EAAIA,EAAIA,EAAIA,GAajD,OAXAjB,EAAM,GAAK4H,EAAST,EAAK,UACzBnH,EAAM,GAAK4H,EAAST,EAAK,UACzBnH,EAAM,GAAK4H,EAAST,EAAK,UACzBnH,EAAM,GAAK4H,EAAST,EAAK,UACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SACzBnH,EAAM,GAAK4H,EAAST,EAAK,SAElBnH,EA8TT,OA7hBAyB,EAAQiI,gBAAgB7G,IAAI,MAAO2C,GACnC/D,EAAQiI,gBAAgB7G,IAAI,QAASgC,GACrCpD,EAAQiI,gBAAgB7G,IAAI,SAAU0C,GACtC9D,EAAQiI,gBAAgB7G,IAAI,MAAO6C,GACnCjE,EAAQiI,gBAAgB7G,IAAI,KAAM8C,GAClClE,EAAQiI,gBAAgB7G,IAAI,MAAO+C,GACnCnE,EAAQiI,gBAAgB7G,IAAI,MAAOmD,GACnCvE,EAAQiI,gBAAgB7G,IAAI,OAAQkD,GACpCtE,EAAQiI,gBAAgB7G,IAAI,MAAOgD,GACnCpE,EAAQiI,gBAAgB7G,IAAI,OAAQiD,GACpCrE,EAAQiI,gBAAgB7G,IAAI,UAAWqD,GACvCzE,EAAQiI,gBAAgB7G,IAAI,aAAcsD,GAC1C1E,EAAQiI,gBAAgB7G,IAAI,YAAauD,GACzC3E,EAAQiI,gBAAgB7G,IAAI,WAAYwD,GACxC5E,EAAQiI,gBAAgB7G,IAAI,SAAUyD,GACtC7E,EAAQiI,gBAAgB7G,IAAI,OAAQ8D,GACpClF,EAAQiI,gBAAgB7G,IAAI,OAAQgE,GACpCpF,EAAQiI,gBAAgB7G,IAAI,eAAgBiE,GAC5CrF,EAAQiI,gBAAgB7G,IAAI,MAAOoD,GAGnC9D,EAAQuH,gBAAkBjI,EAAQiI,gBAGlCtH,EAASsH,gBAAkBjI,EAAQiI,gBAGnCvH,EAAQ8B,MAAM0F,cAAgB,CAC5B,CAAEpF,SAAU,SACZ,CAAEA,SAAU,UACZ,CAAEA,SAAU,OACZ,CAAEA,SAAU,OACZ,CAAEA,SAAU,MACZ,CAAEA,SAAU,OACZ,CAAEA,SAAU,OACZ,CAAEA,SAAU,QACZ,CAAEA,SAAU,OACZ,CAAEA,SAAU,QACZ,CAAEA,SAAU,QAGdnC,EAAS6B,MAAM0F,cAAgB,CAC7B,CAAEpF,SAAU,WACZ,CAAEA,SAAU,cACZ,CAAEA,SAAU,aACZ,CAAEA,SAAU,UACZ,CAAEA,SAAU,QACZ,CAAEA,SAAU,QACZ,CAAEA,SAAU,YACZ,CAAEA,SAAU,iBAKd,SAASqF,IACPC,YAAW,WAAaxE,IAAgBuE,MAAW,MACnD7I,GAAY,GACH,KAAK,IACZA,EAAM,GANV6I,GAyeOnI,EAqEMqI,MAhEf,WAcE,OAZAC,qBAAU,WACRjI,SAASC,MAAQ,0BAChB,IAWD,gCACE,sBAAKiI,UAAU,kDAAf,UACI,wBAAQA,UAAU,2BAAlB,iBACA,wBAAQA,UAAU,0BAAlB,iBACA,wBAAQA,UAAU,0BAAlB,kBACA,wBAAQA,UAAU,0BAAlB,qBAGJ,sBAAKA,UAAU,OAAf,UACE,sBAAKC,GAAG,aAAaD,UAAU,yDAA/B,UACE,cAAC,IAAD,CACEhJ,YAAaA,EACbkJ,aAAa,eACbP,cAAe,KAEjB,sBAAKK,UAAU,OAAf,UACE,4EACA,sBAAKA,UAAU,OAAf,UACE,oBAAIA,UAAU,OAAd,4BACA,oBAAIA,UAAU,OAAd,4BACA,qEAKN,sBAAKG,MAAO,CAACC,OAAQ,QAASJ,UAAU,yEAAxC,UACE,sBAAKA,UAAU,MAAf,UACE,uBAAOK,KAAK,QAAQJ,GAAG,MAAM1K,KAAK,KAAK+K,SAAS,IAChD,uBAAON,UAAU,YAAYO,QAAQ,MAArC,sBACA,qBAAKP,UAAU,cAAf,SACE,qBAAKC,GAAG,UAAUE,MAAO,CAACC,OAAQ,gBAItC,sBAAKJ,UAAU,MAAf,UACE,uBAAOK,KAAK,QAAQJ,GAAG,MAAM1K,KAAK,OAClC,uBAAOyK,UAAU,YAAYO,QAAQ,MAArC,0BACA,qBAAKP,UAAU,cAAf,SACE,qBAAKC,GAAG,WAAWE,MAAO,CAACC,OAAQ,0BChpClCI,EAXH,WACV,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAWb,IACrC,cAAC,IAAD,CAAUc,GAAG,gBCKNC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1J,SAAS2J,eAAe,SAM1BZ,M","file":"static/js/main.c66bdd3f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport * as go from 'gojs';\r\nimport { ReactDiagram } from 'gojs-react';\r\n\r\nimport '../../App.css';  // contains .diagram-component CSS\r\n\r\n// black rectangle for IC\r\nexport function ICshapeStyle() {\r\n  return {\r\n    name: \"NODESHAPE\",\r\n    fill: \"black\",\r\n    desiredSize: new go.Size(100, 40),\r\n  };\r\n}\r\n\r\n\r\nexport  function nodeEllipse() {\r\n  return {\r\n    fill: \"gray\",\r\n    desiredSize: new go.Size(8, 12),\r\n  }\r\n}\r\n\r\nexport function ledRedStyle() {\r\n  return {\r\n    name: \"LED_RED\",\r\n    fill: \"gray\",\r\n    desiredSize: new go.Size(20, 40),\r\n  }\r\n}\r\n\r\nexport function ledGreenStyle() {\r\n  return {\r\n    name: \"LED_GREEN\",\r\n    fill: \"gray\",\r\n    desiredSize: new go.Size(20, 40),\r\n  }\r\n}\r\n\r\nexport function ledYellowStyle() {\r\n  return {\r\n    name: \"LED_YELLOW\",\r\n    fill: \"gray\",\r\n    desiredSize: new go.Size(20, 40),\r\n  }\r\n}\r\n\r\nexport function resistorStyle() {\r\n  return {\r\n    fill: \"#D9CAB3\",\r\n    desiredSize: new go.Size(60, 20),\r\n  }\r\n}\r\n\r\nexport function sevenSegmentStyle() {\r\n  return {\r\n    fill: \"black\",\r\n    desiredSize: new go.Size(100, 150),\r\n  }\r\n}\r\n\r\nexport function numberPart() {\r\n  return {\r\n    stroke: \"white\",\r\n    fill: \"black\",\r\n    desiredSize: new go.Size(5, 55),\r\n  }\r\n}\r\n\r\nexport function numberPartA() {\r\n  return {\r\n    name: \"A\",\r\n    stroke: \"white\",\r\n    fill: \"black\",\r\n    desiredSize: new go.Size(5, 55),\r\n  }\r\n}\r\n\r\nexport function numberPartB() {\r\n  return {\r\n    name: \"B\",\r\n    stroke: \"white\",\r\n    fill: \"black\",\r\n    desiredSize: new go.Size(5, 55),\r\n  }\r\n}\r\n\r\nexport function numberPartC() {\r\n  return {\r\n    name: \"C\",\r\n    stroke: \"white\",\r\n    fill: \"black\",\r\n    desiredSize: new go.Size(5, 55),\r\n  }\r\n}\r\n\r\nexport function numberPartD() {\r\n  return {\r\n    name: \"D\",\r\n    stroke: \"white\",\r\n    fill: \"black\",\r\n    desiredSize: new go.Size(5, 55),\r\n  }\r\n}\r\n\r\nexport function numberPartE() {\r\n  return {\r\n    name: \"E\",\r\n    stroke: \"white\",\r\n    fill: \"black\",\r\n    desiredSize: new go.Size(5, 55),\r\n  }\r\n}\r\n\r\nexport function numberPartF() {\r\n  return {\r\n    name: \"F\",\r\n    stroke: \"white\",\r\n    fill: \"black\",\r\n    desiredSize: new go.Size(5, 55),\r\n  }\r\n}\r\n\r\nexport function numberPartG() {\r\n  return {\r\n    name: \"G\",\r\n    stroke: \"white\",\r\n    fill: \"black\",\r\n    desiredSize: new go.Size(5, 55),\r\n  }\r\n}\r\n\r\nexport function twoWayLineA() {\r\n  return {\r\n    name: \"A\",\r\n    stroke: \"white\",\r\n    fill: \"white\",\r\n    desiredSize: new go.Size(1,30),\r\n  }\r\n}\r\n\r\nexport function twoWayLineB() {\r\n  return {\r\n    name: \"B\",\r\n    stroke: \"white\",\r\n    fill: \"white\",\r\n    desiredSize: new go.Size(1,30),\r\n  }\r\n}\r\n\r\nexport function twoWayLineC() {\r\n  return {\r\n    name: \"C\",\r\n    stroke: \"white\",\r\n    fill: \"white\",\r\n    desiredSize: new go.Size(1,30),\r\n  }\r\n}","import React from 'react';\r\n\r\nimport * as go from 'gojs';\r\nimport { ReactDiagram } from 'gojs-react';\r\n\r\nimport '../../App.css';  // contains .diagram-component CSS\r\n\r\n\r\n// for bottom output port and top input port\r\nexport function FromBottom(input: any) {\r\n  return {\r\n    desiredSize: new go.Size(6, 6),\r\n    fill: \"#c3c6cd\",\r\n    fromSpot: go.Spot.Bottom,\r\n    fromLinkable: !input,\r\n    toSpot: go.Spot.Top,\r\n    toLinkable: input,\r\n    toMaxLinks: 1,\r\n    cursor: \"pointer\"\r\n  };\r\n}\r\n\r\n// for top output port and bottom input port\r\nexport function FromTop(input: any) {\r\n  return {\r\n    desiredSize: new go.Size(6, 6),\r\n    fill: \"#c3c6cd\",\r\n    fromSpot: go.Spot.Top,\r\n    fromLinkable: !input,\r\n    toSpot: go.Spot.Bottom,\r\n    toLinkable: input,\r\n    toMaxLinks: 1,\r\n    cursor: \"pointer\"\r\n  };\r\n}\r\n\r\n// for input and output\r\nexport function InoutPort(input: any) {\r\n  return {\r\n    desiredSize: new go.Size(6, 6),\r\n    fill: \"#c3c6cd\",\r\n    fromSpot: go.Spot.Right, \r\n    fromLinkable: !input,\r\n    toSpot: go.Spot.Left,\r\n    toLinkable: input,\r\n    toMaxLinks: 1,\r\n    cursor: \"pointer\"\r\n  };\r\n}\r\n\r\n// for switch\r\nexport function SwitchLeft() {\r\n  return {\r\n    desiredSize: new go.Size(6, 6),\r\n    fill: \"#c3c6cd\",\r\n    fromSpot: go.Spot.Left, \r\n    fromLinkable: true,\r\n    toSpot: go.Spot.Left,\r\n    toLinkable: true,\r\n    toMaxLinks: 1,\r\n    cursor: \"pointer\"\r\n  };\r\n}\r\n\r\nexport function SwitchRight() {\r\n  return {\r\n    desiredSize: new go.Size(6, 6),\r\n    fill: \"#c3c6cd\",\r\n    fromSpot: go.Spot.Right, \r\n    fromLinkable: true,\r\n    toSpot: go.Spot.Right,\r\n    toLinkable: true,\r\n    toMaxLinks: 1,\r\n    cursor: \"pointer\"\r\n  };\r\n}","import React from 'react';\r\nimport { useEffect } from 'react';\r\n\r\nimport * as go from 'gojs';\r\nimport { ReactDiagram } from 'gojs-react';\r\n\r\nimport '../App.css';  // contains .diagram-component CSS\r\nimport { ICshapeStyle, nodeEllipse, ledRedStyle, ledYellowStyle, ledGreenStyle, resistorStyle, sevenSegmentStyle, numberPart, numberPartG, numberPartF, numberPartA, numberPartB, numberPartC,numberPartD,numberPartE, twoWayLineA, twoWayLineB, twoWayLineC } from './node/nodeStyle';\r\nimport { FromBottom, FromTop, InoutPort, SwitchLeft, SwitchRight } from './node/portTemplate';\r\n\r\nvar count=0;\r\nvar jsonData = {};\r\n\r\nfunction initDiagram() {\r\n\r\n  // define variable\r\n  var red = \"orangered\";  // 0 or false\r\n  var green = \"forestgreen\";  // 1 or true\r\n  var black = \"black\"\r\n  var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);\r\n\r\n\r\n  const $ = go.GraphObject.make;\r\n  // set your license key here before creating the diagram: go.Diagram.licenseKey = \"...\";\r\n  const diagram =\r\n    $(go.Diagram,\r\n      {\r\n        \"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\r\n        \"draggingTool.isGridSnapEnabled\": true,\r\n        'undoManager.isEnabled': true,\r\n        'initialScale': 1.5,\r\n      });\r\n  \r\n  // when the document is modified, add a \"*\" to the title\r\n  diagram.addDiagramListener(\"Modified\", function(e:any) {\r\n    var idx = document.title.indexOf(\"*\");\r\n    if (diagram.isModified) {\r\n      if (idx < 0) document.title += \"*\";\r\n    } else {\r\n      if (idx >= 0) document.title = document.title.substr(0, idx);\r\n    }\r\n  });\r\n\r\n  // create a new Platte\r\n  var palette = new go.Palette(\"palette\");\r\n  var palette2 = new go.Palette(\"palette2\");\r\n\r\n  // grid\r\n  diagram.grid.visible = true;\r\n  diagram.grid =\r\n  $(go.Panel, go.Panel.Grid,  // or \"Grid\"\r\n    { gridCellSize: new go.Size(10, 10) },\r\n    $(go.Shape, \"LineH\", { stroke: \"lightgray\" }),\r\n    $(go.Shape, \"LineV\", { stroke: \"lightgray\" })\r\n  );\r\n\r\n  go.Shape.defineFigureGenerator(\"HalfEllipse\", function(shape, w, h) {\r\n    return new go.Geometry()\r\n      .add(new go.PathFigure(0, 0, true)\r\n      .add(new go.PathSegment(go.PathSegment.Bezier, w, .5 * h, KAPPA * w, 0, w, (.5 - KAPPA / 2) * h))\r\n      .add(new go.PathSegment(go.PathSegment.Bezier, 0, h, w, (.5 + KAPPA / 2) * h, KAPPA * w, h).close()))\r\n      .setSpots(0, 0.156, 0.844, 0.844);\r\n  });\r\n  \r\n  // creates relinkable Links that will avoid crossing Nodes when possible \r\n  // and will jump over other Links in their paths\r\n  diagram.linkTemplate =\r\n    $(go.Link,\r\n      {\r\n        routing: go.Link.AvoidsNodes,\r\n        curve: go.Link.JumpOver,\r\n        corner: 3,\r\n        relinkableFrom: true, relinkableTo: true,\r\n        selectionAdorned: false, // Links are not adorned when selected so that their color remains visible.\r\n        shadowOffset: new go.Point(0, 0), shadowBlur: 5, shadowColor: \"blue\",\r\n      },\r\n      new go.Binding(\"isShadowed\", \"isSelected\").ofObject(),\r\n      $(go.Shape,\r\n        { name: \"SHAPE\", strokeWidth: 2, stroke: red , parameter1: 0}), new go.Binding(\"stroke\", \"color\").ofModel(), new go.Binding(\"parameter1\", \"value\")/*.ofModel()*/);\r\n    \r\n  // Graph link model to identify the port\r\n  diagram.model = \r\n    $(go.GraphLinksModel,\r\n      { linkFromPortIdProperty: \"fromPort\",  // required information:\r\n        linkToPortIdProperty: \"toPort\",      // identifies data property names\r\n    });\r\n    \r\n  // node template helpers (Tooltip when hover with mouse)\r\n  var sharedToolTip =\r\n    $(\"ToolTip\",\r\n      { \"Border.figure\": \"RoundedRectangle\" },\r\n      $(go.TextBlock, { margin: 2 },\r\n        new go.Binding(\"text\", \"\", function(d) { return d.category; })));\r\n\r\n  // node settings\r\n\r\n  function nodeStyle() {\r\n    return [new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n    new go.Binding(\"isShadowed\", \"isSelected\").ofObject(),\r\n    {\r\n      selectionAdorned: false,\r\n      shadowOffset: new go.Point(0, 0),\r\n      shadowBlur: 15,\r\n      shadowColor: \"blue\",\r\n      toolTip: sharedToolTip\r\n    }];\r\n  }\r\n  \r\n  // define templates for each type of node\r\n\r\n  var inputTemplate =\r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n      $(go.Shape, \"Circle\", ICshapeStyle(),\r\n        { fill: red }),\r\n      $(go.Shape, \"Rectangle\", InoutPort(false),\r\n        { portId: \"\", alignment: new go.Spot(0.4, 0.5) }, new go.Binding(\"fill\", \"color\").ofModel()),\r\n      { // if double-clicked, an input node will change its value, represented by the color.\r\n        doubleClick: function(e, obj:any) {\r\n          e.diagram.startTransaction(\"Toggle Input\");\r\n          var shp = obj.findObject(\"NODESHAPE\");\r\n          shp.fill = (shp.fill === green) ? red : green;\r\n          updateStates();\r\n          e.diagram.commitTransaction(\"Toggle Input\");\r\n        }\r\n      }\r\n    );\r\n\r\n  var outputTemplate =\r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n      $(go.Shape, \"Square\", ICshapeStyle(),\r\n        { fill: \"grey\" }),\r\n      $(go.Shape, \"Rectangle\", InoutPort(true),\r\n        { portId: \"\", alignment: new go.Spot(0, 0.5)}, new go.Binding(\"fill\", \"color\").ofModel())\r\n    );\r\n\r\n  var clkTemplate =\r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n      $(go.Shape, \"Rectangle\", ICshapeStyle(),\r\n        { fill: red }),\r\n      $(go.Shape, \"Rectangle\", InoutPort(false),\r\n        { portId: \"\", alignment: new go.Spot(1.01, 0.5) }, new go.Binding(\"fill\", \"color\").ofModel()),\r\n      $(go.TextBlock, { text: \"clk T=1500ms\", stroke: \"white\"  }),\r\n    );\r\n\r\n  var andTemplate =\r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n      $(go.Shape, \"Rectangle\", ICshapeStyle()),\r\n      $(go.Shape, \"HalfEllipse\", nodeEllipse(),\r\n        { alignment: new go.Spot(0.05, 0.5)}),\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port14\", alignment: new go.Spot(0.05, 0) }),//vcc port14\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port13\", alignment: new go.Spot(0.2, 0) }),//input port13\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port12\", alignment: new go.Spot(0.35, 0) }),//input port12\r\n      $(go.Shape, \"Rectangle\", FromTop(false),\r\n        { portId: \"port11\", alignment: new go.Spot(0.5, 0) }),//output port11 of port13\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port10\", alignment: new go.Spot(0.65, 0) }),//input port10\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port9\", alignment: new go.Spot(0.8, 0) }),//input port9\r\n      $(go.Shape, \"Rectangle\", FromTop(false),\r\n        { portId: \"port8\", alignment: new go.Spot(0.95, 0) }),//output port8 of of port10 port9\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port1\", alignment: new go.Spot(0.05, 1) }),//input port1\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port2\", alignment: new go.Spot(0.2, 1) }),//input port2\r\n      $(go.Shape, \"Rectangle\", FromBottom(false),\r\n        { portId: \"port3\", alignment: new go.Spot(0.35, 1) }),//output port3 of port1 port2\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port4\", alignment: new go.Spot(0.5, 1) }),//input port4\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port5\", alignment: new go.Spot(0.65, 1) }),//input port5\r\n      $(go.Shape, \"Rectangle\", FromBottom(false),\r\n        { portId: \"port6\", alignment: new go.Spot(0.8, 1) }),//output port6 of port4 port5\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port7\", alignment: new go.Spot(0.95, 1) }),//gnd port7\r\n      $(go.TextBlock, { text: \"7408 and\", stroke: \"white\" }),\r\n    );\r\n\r\n  var orTemplate =\r\n      $(go.Node, \"Spot\", nodeStyle(),\r\n      $(go.Shape, \"Rectangle\", ICshapeStyle()),\r\n      $(go.Shape, \"HalfEllipse\", nodeEllipse(),\r\n        { alignment: new go.Spot(0.05, 0.5)}),\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port14\", alignment: new go.Spot(0.05, 0) }),//vcc port14\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port13\", alignment: new go.Spot(0.2, 0) }),//input port13\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port12\", alignment: new go.Spot(0.35, 0) }),//input port12\r\n      $(go.Shape, \"Rectangle\", FromTop(false),\r\n        { portId: \"port11\", alignment: new go.Spot(0.5, 0) }),//output port11 of port13\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port10\", alignment: new go.Spot(0.65, 0) }),//input port10\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port9\", alignment: new go.Spot(0.8, 0) }),//input port9\r\n      $(go.Shape, \"Rectangle\", FromTop(false),\r\n        { portId: \"port8\", alignment: new go.Spot(0.95, 0) }),//output port8 of of port10 port9\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port1\", alignment: new go.Spot(0.05, 1) }),//input port1\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port2\", alignment: new go.Spot(0.2, 1) }),//input port2\r\n      $(go.Shape, \"Rectangle\", FromBottom(false),\r\n        { portId: \"port3\", alignment: new go.Spot(0.35, 1) }),//output port3 of port1 port2\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port4\", alignment: new go.Spot(0.5, 1) }),//input port4\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port5\", alignment: new go.Spot(0.65, 1) }),//input port5\r\n      $(go.Shape, \"Rectangle\", FromBottom(false),\r\n        { portId: \"port6\", alignment: new go.Spot(0.8, 1) }),//output port6 of port4 port5\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port7\", alignment: new go.Spot(0.95, 1) }),//gnd port7\r\n      $(go.TextBlock, { text: \"7432 or\", stroke: \"white\" }),\r\n    );\r\n\r\n  var xorTemplate =\r\n      $(go.Node, \"Spot\", nodeStyle(),\r\n      $(go.Shape, \"Rectangle\", ICshapeStyle()),\r\n      $(go.Shape, \"HalfEllipse\", nodeEllipse(),\r\n        { alignment: new go.Spot(0.05, 0.5)}),\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port14\", alignment: new go.Spot(0.05, 0) }),//vcc port14\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port13\", alignment: new go.Spot(0.2, 0) }),//input port13\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port12\", alignment: new go.Spot(0.35, 0) }),//input port12\r\n      $(go.Shape, \"Rectangle\", FromTop(false),\r\n        { portId: \"port11\", alignment: new go.Spot(0.5, 0) }),//output port11 of port13\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port10\", alignment: new go.Spot(0.65, 0) }),//input port10\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"port9\", alignment: new go.Spot(0.8, 0) }),//input port9\r\n      $(go.Shape, \"Rectangle\", FromTop(false),\r\n        { portId: \"port8\", alignment: new go.Spot(0.95, 0) }),//output port8 of of port10 port9\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port1\", alignment: new go.Spot(0.05, 1) }),//input port1\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port2\", alignment: new go.Spot(0.2, 1) }),//input port2\r\n      $(go.Shape, \"Rectangle\", FromBottom(false),\r\n        { portId: \"port3\", alignment: new go.Spot(0.35, 1) }),//output port3 of port1 port2\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port4\", alignment: new go.Spot(0.5, 1) }),//input port4\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port5\", alignment: new go.Spot(0.65, 1) }),//input port5\r\n      $(go.Shape, \"Rectangle\", FromBottom(false),\r\n        { portId: \"port6\", alignment: new go.Spot(0.8, 1) }),//output port6 of port4 port5\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"port7\", alignment: new go.Spot(0.95, 1) }),//gnd port7\r\n      $(go.TextBlock, { text: \"7486 xor\", stroke: \"white\" }),\r\n    );\r\n\r\n  var norTemplate =\r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n    $(go.Shape, \"Rectangle\", ICshapeStyle()),\r\n    $(go.Shape, \"HalfEllipse\", nodeEllipse(),\r\n      { alignment: new go.Spot(0.05, 0.5)}),\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port14\", alignment: new go.Spot(0.05, 0) }),//vcc port14\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port13\", alignment: new go.Spot(0.2, 0) }),//input port13\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port12\", alignment: new go.Spot(0.35, 0) }),//input port12\r\n    $(go.Shape, \"Rectangle\", FromTop(false),\r\n      { portId: \"port11\", alignment: new go.Spot(0.5, 0) }),//output port11 of port13\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port10\", alignment: new go.Spot(0.65, 0) }),//input port10\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port9\", alignment: new go.Spot(0.8, 0) }),//input port9\r\n    $(go.Shape, \"Rectangle\", FromTop(false),\r\n      { portId: \"port8\", alignment: new go.Spot(0.95, 0) }),//output port8 of of port10 port9\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port1\", alignment: new go.Spot(0.05, 1) }),//input port1\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port2\", alignment: new go.Spot(0.2, 1) }),//input port2\r\n    $(go.Shape, \"Rectangle\", FromBottom(false),\r\n      { portId: \"port3\", alignment: new go.Spot(0.35, 1) }),//output port3 of port1 port2\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port4\", alignment: new go.Spot(0.5, 1) }),//input port4\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port5\", alignment: new go.Spot(0.65, 1) }),//input port5\r\n    $(go.Shape, \"Rectangle\", FromBottom(false),\r\n      { portId: \"port6\", alignment: new go.Spot(0.8, 1) }),//output port6 of port4 port5\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port7\", alignment: new go.Spot(0.95, 1) }),//gnd port7\r\n    $(go.TextBlock, { text: \"7402 nor\", stroke: \"white\" }),\r\n  );\r\n\r\n  var xnorTemplate =\r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n    $(go.Shape, \"Rectangle\", ICshapeStyle()),\r\n    $(go.Shape, \"HalfEllipse\", nodeEllipse(),\r\n      { alignment: new go.Spot(0.05, 0.5)}),\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port14\", alignment: new go.Spot(0.05, 0) }),//vcc port14\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port13\", alignment: new go.Spot(0.2, 0) }),//input port13\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port12\", alignment: new go.Spot(0.35, 0) }),//input port12\r\n    $(go.Shape, \"Rectangle\", FromTop(false),\r\n      { portId: \"port11\", alignment: new go.Spot(0.5, 0) }),//output port11 of port13\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port10\", alignment: new go.Spot(0.65, 0) }),//input port10\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port9\", alignment: new go.Spot(0.8, 0) }),//input port9\r\n    $(go.Shape, \"Rectangle\", FromTop(false),\r\n      { portId: \"port8\", alignment: new go.Spot(0.95, 0) }),//output port8 of of port10 port9\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port1\", alignment: new go.Spot(0.05, 1) }),//input port1\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port2\", alignment: new go.Spot(0.2, 1) }),//input port2\r\n    $(go.Shape, \"Rectangle\", FromBottom(false),\r\n      { portId: \"port3\", alignment: new go.Spot(0.35, 1) }),//output port3 of port1 port2\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port4\", alignment: new go.Spot(0.5, 1) }),//input port4\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port5\", alignment: new go.Spot(0.65, 1) }),//input port5\r\n    $(go.Shape, \"Rectangle\", FromBottom(false),\r\n      { portId: \"port6\", alignment: new go.Spot(0.8, 1) }),//output port6 of port4 port5\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port7\", alignment: new go.Spot(0.95, 1) }),//gnd port7\r\n    $(go.TextBlock, { text: \"74266 xnor\", stroke: \"white\" }),\r\n  );\r\n\r\n  var nandTemplate =\r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n    $(go.Shape, \"Rectangle\", ICshapeStyle()),\r\n    $(go.Shape, \"HalfEllipse\", nodeEllipse(),\r\n      { alignment: new go.Spot(0.05, 0.5)}),\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port14\", alignment: new go.Spot(0.05, 0) }),//vcc port14\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port13\", alignment: new go.Spot(0.2, 0) }),//input port13\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port12\", alignment: new go.Spot(0.35, 0) }),//input port12\r\n    $(go.Shape, \"Rectangle\", FromTop(false),\r\n      { portId: \"port11\", alignment: new go.Spot(0.5, 0) }),//output port11 of port13\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port10\", alignment: new go.Spot(0.65, 0) }),//input port10\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port9\", alignment: new go.Spot(0.8, 0) }),//input port9\r\n    $(go.Shape, \"Rectangle\", FromTop(false),\r\n      { portId: \"port8\", alignment: new go.Spot(0.95, 0) }),//output port8 of of port10 port9\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port1\", alignment: new go.Spot(0.05, 1) }),//input port1\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port2\", alignment: new go.Spot(0.2, 1) }),//input port2\r\n    $(go.Shape, \"Rectangle\", FromBottom(false),\r\n      { portId: \"port3\", alignment: new go.Spot(0.35, 1) }),//output port3 of port1 port2\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port4\", alignment: new go.Spot(0.5, 1) }),//input port4\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port5\", alignment: new go.Spot(0.65, 1) }),//input port5\r\n    $(go.Shape, \"Rectangle\", FromBottom(false),\r\n      { portId: \"port6\", alignment: new go.Spot(0.8, 1) }),//output port6 of port4 port5\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port7\", alignment: new go.Spot(0.95, 1) }),//gnd port7\r\n    $(go.TextBlock, { text: \"7400 nand\", stroke: \"white\" }),\r\n  );\r\n\r\n  var notTemplate =\r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n    $(go.Shape, \"Rectangle\", ICshapeStyle()),\r\n    $(go.Shape, \"HalfEllipse\", nodeEllipse(),\r\n      { alignment: new go.Spot(0.05, 0.5)}),\r\n    $(go.Shape, \"Rectangle\", FromBottom(true), //fb botout topin , ft topout botin\r\n      { portId: \"port14\", alignment: new go.Spot(0.05, 0) }),//vcc port14\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port13\", alignment: new go.Spot(0.2, 0) }),//input port13\r\n    $(go.Shape, \"Rectangle\", FromTop(false),\r\n      { portId: \"port12\", alignment: new go.Spot(0.35, 0) }),//output port12 from port13\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port11\", alignment: new go.Spot(0.5, 0) }),//input port11\r\n    $(go.Shape, \"Rectangle\", FromTop(false),\r\n      { portId: \"port10\", alignment: new go.Spot(0.65, 0) }),//output port10 from port11\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port9\", alignment: new go.Spot(0.8, 0) }),//input port9\r\n    $(go.Shape, \"Rectangle\", FromTop(false),\r\n      { portId: \"port8\", alignment: new go.Spot(0.95, 0) }),//output port8 from port9\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port1\", alignment: new go.Spot(0.05, 1) }),//input port1\r\n    $(go.Shape, \"Rectangle\", FromBottom(false),\r\n      { portId: \"port2\", alignment: new go.Spot(0.2, 1) }),//output port2 from port1\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port3\", alignment: new go.Spot(0.35, 1) }),//input port3 \r\n    $(go.Shape, \"Rectangle\", FromBottom(false),\r\n      { portId: \"port4\", alignment: new go.Spot(0.5, 1) }),//output port4 from port3\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port5\", alignment: new go.Spot(0.65, 1) }),//input port5\r\n    $(go.Shape, \"Rectangle\", FromBottom(false),\r\n      { portId: \"port6\", alignment: new go.Spot(0.8, 1) }),//output port6 from port5\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port7\", alignment: new go.Spot(0.95, 1) }),//gnd port7\r\n    $(go.TextBlock, { text: \"7404 not\", stroke: \"white\" }),\r\n  );\r\n\r\n  var dffTemplate =\r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n    $(go.Shape, \"Rectangle\", ICshapeStyle()),\r\n    $(go.Shape, \"HalfEllipse\", nodeEllipse(),\r\n      { alignment: new go.Spot(0.05, 0.5)}),\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port14\", alignment: new go.Spot(0.05, 0) }),//vcc port14\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port13\", alignment: new go.Spot(0.2, 0) }),//input clr port13\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port12\", alignment: new go.Spot(0.35, 0) }),//input d port12\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port11\", alignment: new go.Spot(0.5, 0) }),//input clk port11\r\n    $(go.Shape, \"Rectangle\", FromBottom(true),\r\n      { portId: \"port10\", alignment: new go.Spot(0.65, 0) }),//input pre port10 \r\n    $(go.Shape, \"Rectangle\", FromTop(false),\r\n      { portId: \"port9\", alignment: new go.Spot(0.8, 0) }),//output q port9\r\n    $(go.Shape, \"Rectangle\", FromTop(false),\r\n      { portId: \"port8\", alignment: new go.Spot(0.95, 0) }),//output q' port8 \r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port1\", alignment: new go.Spot(0.05, 1) }),//input clr port1\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port2\", alignment: new go.Spot(0.2, 1) }),//input d port2 \r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port3\", alignment: new go.Spot(0.35, 1) }),//input clk port3 \r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port4\", alignment: new go.Spot(0.5, 1) }),//input pre port4 \r\n    $(go.Shape, \"Rectangle\", FromBottom(false),\r\n      { portId: \"port5\", alignment: new go.Spot(0.65, 1) }),//output q port5\r\n    $(go.Shape, \"Rectangle\", FromBottom(false),\r\n      { portId: \"port6\", alignment: new go.Spot(0.8, 1) }),//output q' port6 \r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port7\", alignment: new go.Spot(0.95, 1) }),//gnd port7\r\n    $(go.TextBlock, { text: \"7474 dff\", stroke: \"white\" }),\r\n  );\r\n\r\n  var ledRedTemplate = \r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n    $(go.Shape, \"Rectangle\", ledRedStyle()),\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port1\", alignment: new go.Spot(0.2, 1) }),//left port\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port2\", alignment: new go.Spot(0.8, 1) }),//right port\r\n    $(go.TextBlock, { text: \"led\", stroke: \"white\" }),\r\n  );\r\n\r\n  var ledYellowTemplate = \r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n    $(go.Shape, \"Rectangle\", ledYellowStyle()),\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port1\", alignment: new go.Spot(0.2, 1) }),//left port\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port2\", alignment: new go.Spot(0.8, 1) }),//right port\r\n    $(go.TextBlock, { text: \"led\", stroke: \"white\" }),\r\n  );\r\n\r\n  var ledGreenTemplate = \r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n    $(go.Shape, \"Rectangle\", ledGreenStyle()),\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port1\", alignment: new go.Spot(0.2, 1) }),//left port\r\n    $(go.Shape, \"Rectangle\", FromTop(true),\r\n      { portId: \"port2\", alignment: new go.Spot(0.8, 1) }),//right port\r\n    $(go.TextBlock, { text: \"led\", stroke: \"white\" }),\r\n  );\r\n\r\n  var resistorTemplate = \r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n      $(go.Shape, \"RoundedRectangle\", resistorStyle()),\r\n      $(go.Shape, \"Rectangle\", InoutPort(true),\r\n        { portId: \"in\", alignment: new go.Spot(0, 0.5) }),\r\n      $(go.Shape, \"Rectangle\", InoutPort(false),\r\n        { portId: \"out\", alignment: new go.Spot(1, 0.5) }),\r\n      $(go.Shape, {fill: \"brown\", desiredSize: new go.Size(5, 20), alignment: new go.Spot(0.2, 0.5)}),\r\n      $(go.Shape, {fill: \"black\", desiredSize: new go.Size(5, 20), alignment: new go.Spot(0.4, 0.5)}),\r\n      $(go.Shape, {fill: \"orange\", desiredSize: new go.Size(5, 20), alignment: new go.Spot(0.6, 0.5)}),\r\n      $(go.Shape, {fill: \"#AB6D23\", desiredSize: new go.Size(5, 20), alignment: new go.Spot(0.8, 0.5)}),   \r\n  );\r\n\r\n  var switchTemplate =\r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n      $(go.Shape, \"Square\", ICshapeStyle()),\r\n      $(go.Shape, \"Rectangle\", InoutPort(true),\r\n        { portId: \"in\", alignment: new go.Spot(0, 0.5) }),\r\n      $(go.Shape, \"Rectangle\", InoutPort(false),\r\n        { portId: \"out\", alignment: new go.Spot(0.4, 0.5) }),\r\n      $(go.Shape, twoWayLineA(), { alignment: new go.Spot(0.2, 0.35), angle: 60 }),\r\n      $(go.Shape, twoWayLineC(), { alignment: new go.Spot(0.2, 0.5), angle: 90, opacity: 0, }),\r\n      { // double-click toggle switch on or off. represent by its line angle.\r\n        doubleClick: function(e, obj:any) {\r\n          e.diagram.startTransaction(\"Toggle Switch\");\r\n          var lineA = obj.findObject(\"A\"); //60 degree angle line\r\n          var lineC = obj.findObject(\"C\"); //straight line when turn on switch\r\n          lineA.opacity = (lineA.opacity == 1) ? 0 : 1;\r\n          lineC.opacity = (lineC.opacity == 1) ? 0 : 1;\r\n          updateStates();\r\n          e.diagram.commitTransaction(\"Toggle Switch\");\r\n      }}\r\n    );\r\n    \r\n  var twoWaySwitchATemplate =\r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n      $(go.Shape, \"Square\", ICshapeStyle()),\r\n      $(go.Shape, \"Rectangle\", SwitchRight(),\r\n        { portId: \"port1\", alignment: new go.Spot(0.4, 0.2) }),\r\n      $(go.Shape, \"Rectangle\", SwitchRight(),\r\n        { portId: \"port2\", alignment: new go.Spot(0.4, 0.8) }),\r\n      $(go.Shape, \"Rectangle\", SwitchLeft(),\r\n        { portId: \"port3\", alignment: new go.Spot(0, 0.5) }),\r\n      $(go.Shape, twoWayLineA(), { alignment: new go.Spot(0.2, 0.65), angle: -70 }),\r\n      $(go.Shape, twoWayLineB(), { alignment: new go.Spot(0.2, 0.35), angle: 70, opacity: 0 }),\r\n      { // if double-clicked, an input node will change its value, represented by the color.\r\n        doubleClick: function(e, obj:any) {\r\n          e.diagram.startTransaction(\"Toggle Switch\");\r\n          var lineA = obj.findObject(\"A\");\r\n          var lineB = obj.findObject(\"B\");\r\n          lineA.opacity = (lineA.opacity == 1) ? 0 : 1;\r\n          lineB.opacity = (lineB.opacity == 1) ? 0 : 1;\r\n          updateStates();\r\n          e.diagram.commitTransaction(\"Toggle Switch\");\r\n      }}\r\n    );\r\n\r\n  var twoWaySwitchBTemplate =\r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n      $(go.Shape, \"Square\", ICshapeStyle()),\r\n      $(go.Shape, \"Rectangle\", SwitchLeft(),\r\n        { portId: \"port1\", alignment: new go.Spot(0, 0.2) }),\r\n      $(go.Shape, \"Rectangle\", SwitchLeft(),\r\n        { portId: \"port2\", alignment: new go.Spot(0, 0.8) }),\r\n      $(go.Shape, \"Rectangle\", SwitchRight(),\r\n        { portId: \"port3\", alignment: new go.Spot(0.4, 0.5) }),\r\n      $(go.Shape, twoWayLineA(), { alignment: new go.Spot(0.2, 0.35), angle: -70 }),\r\n      $(go.Shape, twoWayLineB(), { alignment: new go.Spot(0.2, 0.65), angle: 70, opacity: 0 }),\r\n      { // double-click change the output port that input will be connect to, represent by its line.\r\n        doubleClick: function(e, obj:any) {\r\n          e.diagram.startTransaction(\"Toggle Switch\");\r\n          var lineA = obj.findObject(\"A\");\r\n          var lineB = obj.findObject(\"B\");\r\n          lineA.opacity = (lineA.opacity == 1) ? 0 : 1;\r\n          lineB.opacity = (lineB.opacity == 1) ? 0 : 1;\r\n          updateStates();\r\n          e.diagram.commitTransaction(\"Toggle Switch\");\r\n      }}\r\n    );\r\n\r\n  var sevenSegmentTemplate = \r\n    $(go.Node, \"Spot\", nodeStyle(),\r\n      $(go.Shape, \"Rectangle\", sevenSegmentStyle()),\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"portG\", alignment: new go.Spot(0.1, 0) }),//G\r\n        $(go.Shape, \"Rectangle\", numberPartG(),\r\n          { angle: 90, alignment: new go.Spot(0.4, 0.5)}),\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"portF\", alignment: new go.Spot(0.3, 0) }),//F\r\n        $(go.Shape, \"Rectangle\", numberPartF(),\r\n          { alignment: new go.Spot(0.1, 0.3)}),\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"portVcc\", alignment: new go.Spot(0.5, 0) }),//vcc\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"portA\", alignment: new go.Spot(0.7, 0) }),//A\r\n        $(go.Shape, \"Rectangle\", numberPartA(),\r\n          { angle: 90, alignment: new go.Spot(0.4, 0.1)}),\r\n      $(go.Shape, \"Rectangle\", FromBottom(true),\r\n        { portId: \"portB\", alignment: new go.Spot(0.9, 0) }),//B\r\n        $(go.Shape, \"Rectangle\", numberPartB(),\r\n          { alignment: new go.Spot(0.7, 0.3)}),\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"portE\", alignment: new go.Spot(0.1, 1) }),//E\r\n        $(go.Shape, \"Rectangle\", numberPartE(),\r\n          { alignment: new go.Spot(0.1, 0.7)}),\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"portD\", alignment: new go.Spot(0.3, 1) }),//D\r\n        $(go.Shape, \"Rectangle\", numberPartD(),\r\n          { angle: 90, alignment: new go.Spot(0.4, 0.9)}),\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"portCom\", alignment: new go.Spot(0.5, 1) }),//Com \r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"portC\", alignment: new go.Spot(0.7, 1) }),//C\r\n        $(go.Shape, \"Rectangle\", numberPartC(),\r\n          { alignment: new go.Spot(0.7, 0.7)}),\r\n      $(go.Shape, \"Rectangle\", FromTop(true),\r\n        { portId: \"portDP\", alignment: new go.Spot(0.9, 1) }),//DP\r\n      $(go.Shape, \"Circle\", \r\n        { name:\"DP\",desiredSize: new go.Size(10, 10), stroke: \"white\", fill: \"black\", alignment: new go.Spot(0.85, 0.9) }),\r\n    );\r\n\r\n  // add the templates created above to diagram and palette\r\n  diagram.nodeTemplateMap.add(\"clk\", clkTemplate);\r\n  diagram.nodeTemplateMap.add(\"input\", inputTemplate);\r\n  diagram.nodeTemplateMap.add(\"output\", outputTemplate);\r\n  diagram.nodeTemplateMap.add(\"and\", andTemplate);\r\n  diagram.nodeTemplateMap.add(\"or\", orTemplate);\r\n  diagram.nodeTemplateMap.add(\"xor\", xorTemplate);\r\n  diagram.nodeTemplateMap.add(\"not\", notTemplate);\r\n  diagram.nodeTemplateMap.add(\"nand\", nandTemplate);\r\n  diagram.nodeTemplateMap.add(\"nor\", norTemplate);\r\n  diagram.nodeTemplateMap.add(\"xnor\", xnorTemplate);\r\n  diagram.nodeTemplateMap.add(\"led_red\", ledRedTemplate);\r\n  diagram.nodeTemplateMap.add(\"led_yellow\", ledYellowTemplate);\r\n  diagram.nodeTemplateMap.add(\"led_green\", ledGreenTemplate);\r\n  diagram.nodeTemplateMap.add(\"resistor\", resistorTemplate);\r\n  diagram.nodeTemplateMap.add(\"switch\", switchTemplate);\r\n  diagram.nodeTemplateMap.add(\"2wsa\", twoWaySwitchATemplate);\r\n  diagram.nodeTemplateMap.add(\"2wsb\", twoWaySwitchBTemplate);\r\n  diagram.nodeTemplateMap.add(\"sevensegment\", sevenSegmentTemplate);\r\n  diagram.nodeTemplateMap.add(\"dff\", dffTemplate);\r\n  \r\n  // share the template map with the Palette\r\n  palette.nodeTemplateMap = diagram.nodeTemplateMap;\r\n\r\n  // \"Others\" category palette\r\n  palette2.nodeTemplateMap = diagram.nodeTemplateMap;\r\n\r\n  // Add something to palette \r\n  palette.model.nodeDataArray = [\r\n    { category: \"input\" },\r\n    { category: \"output\" },\r\n    { category: \"clk\" },\r\n    { category: \"and\" },\r\n    { category: \"or\" },\r\n    { category: \"xor\" },\r\n    { category: \"not\" },\r\n    { category: \"nand\" },\r\n    { category: \"nor\" },\r\n    { category: \"xnor\" },\r\n    { category: \"dff\" },\r\n  ];\r\n\r\n  palette2.model.nodeDataArray = [\r\n    { category: \"led_red\" },\r\n    { category: \"led_yellow\" },\r\n    { category: \"led_green\" },\r\n    { category: \"switch\" },\r\n    { category: \"2wsa\" },\r\n    { category: \"2wsb\" },\r\n    { category: \"resistor\" },\r\n    { category: \"sevensegment\"}\r\n  ];\r\n\r\n  loop();\r\n\r\n  function loop() {\r\n    setTimeout(function() { updateStates(); loop(); }, 250);\r\n    count=count+1;\r\n    if(count%60===0){\r\n      count=0;\r\n    }\r\n  }\r\n  \r\n  function updateStates() {\r\n    var oldskip = diagram.skipsUndoManager;\r\n    diagram.skipsUndoManager = true;\r\n    // do all \"input\" nodes first\r\n    diagram.nodes.each(function(node) {\r\n      if (node.category === \"input\") {\r\n        doInput(node);\r\n      }\r\n    });\r\n    // now we can do all other kinds of nodes\r\n    diagram.nodes.each(function(node) {\r\n      switch (node.category) {\r\n        case \"clk\": doClk(node); break;\r\n        case \"and\": doAnd(node); break;\r\n        case \"or\": doOr(node); break;\r\n        case \"xor\": doXor(node); break;\r\n        case \"not\": doNot(node); break;\r\n        case \"nand\": doNand(node); break;\r\n        case \"nor\": doNor(node); break;\r\n        case \"xnor\": doXnor(node); break;\r\n        case \"dff\": doDff(node); break;\r\n        case \"sevensegment\": do7seg(node); break; \r\n        case \"output\": doOutput(node); break;\r\n        case \"switch\": doSwitch(node); break;\r\n        case \"2wsa\": do2SwitchA(node); break;\r\n        case \"2wsb\": do2SwitchB(node); break;\r\n        case \"resistor\" : doResistor(node); break;\r\n        case \"led_green\" : doLEDgreen(node); break;\r\n        case \"led_yellow\": doLEDyellow(node); break;\r\n        case \"led_red\": doLEDred(node); break;\r\n        case \"input\": break;  // doInput already called, above\r\n      }\r\n    });\r\n    diagram.skipsUndoManager = oldskip;\r\n  }\r\n\r\n  function linkIsTrue(link:any) {  // assume the given Link has a Shape named \"SHAPE\"\r\n    return link.findObject(\"SHAPE\").stroke === green;\r\n  }\r\n\r\n  function setOutputLinks(node:any, color:any) {\r\n    node.findLinksOutOf().each(function(link:any) { link.findObject(\"SHAPE\").stroke = color; });\r\n  }\r\n\r\n  function setOutputLinksP(node:any, color:any, pid:any) {\r\n    node.findLinksOutOf(pid).each(function(link:any) { link.findObject(\"SHAPE\").stroke = color; });\r\n  }\r\n\r\n  function doInput(node:any) {\r\n    setOutputLinks(node, node.findObject(\"NODESHAPE\").fill);\r\n  }\r\n\r\n  function doSwitch(node:any){\r\n    var stat= node.findObject(\"C\").opacity\r\n    var input= getvalue(node,\"in\")!\r\n    if(stat==1){\r\n      setvalue(node,\"out\",input)\r\n    }\r\n    else{\r\n      setvalue(node,\"out\",red)\r\n    }\r\n  }\r\n\r\n  function do2SwitchA(node:any){\r\n    var stat= node.findObject(\"B\").opacity\r\n    var input = getvalue(node,\"port3\")!\r\n    if(stat==1){\r\n      setvalue(node,\"port1\",input)\r\n      setvalue(node,\"port2\",red)\r\n    }\r\n    else{\r\n      setvalue(node,\"port1\",red)\r\n      setvalue(node,\"port2\",input)\r\n    }\r\n  }\r\n\r\n  function do2SwitchB(node:any){\r\n    var stat= node.findObject(\"B\").opacity\r\n    var in1 = getvalue(node,\"port1\")!\r\n    var in2 = getvalue(node,\"port2\")!\r\n    if(stat==1){\r\n      setvalue(node,\"port3\",in2)\r\n    }\r\n    else{\r\n      setvalue(node,\"port3\",in1)\r\n    }\r\n  }\r\n\r\n  function doResistor(node:any){\r\n    var input = getvalue(node,\"in\")!\r\n    setvalue(node,\"out\",input)\r\n  }\r\n\r\n  function doLEDgreen(node:any){\r\n    var input = getvalue(node,\"port1\")!\r\n    var gnd = getvalue(node,\"port2\")\r\n    if(input==green && gnd==green){\r\n      node.findObject(\"LED_GREEN\").fill = green\r\n    }\r\n    else{\r\n      node.findObject(\"LED_GREEN\").fill = \"grey\"\r\n    }\r\n  }\r\n\r\n  function doLEDyellow(node:any){\r\n    var input = getvalue(node,\"port1\")!\r\n    var gnd = getvalue(node,\"port2\")\r\n    if(input==green && gnd==green){\r\n      node.findObject(\"LED_YELLOW\").fill = \"yellow\"\r\n    }\r\n    else{\r\n      node.findObject(\"LED_YELLOW\").fill = \"grey\"\r\n    }\r\n  }\r\n\r\n  function doLEDred(node:any){\r\n    var input = getvalue(node,\"port1\")!\r\n    var gnd = getvalue(node,\"port2\")\r\n    if(input==green && gnd==green){\r\n      node.findObject(\"LED_RED\").fill = red\r\n    }\r\n    else{\r\n      node.findObject(\"LED_RED\").fill = \"grey\"\r\n    }\r\n  }\r\n\r\n\r\n  function getvalue(node:any,pid:any){\r\n    var value\r\n    node.findLinksInto(pid).each( function(link:any) {value=link.findObject(\"SHAPE\").stroke})\r\n    return value\r\n  }\r\n\r\n  function getoldvalue(node:any,pid:any){\r\n    var value\r\n    node.findLinksInto(pid).each( function(link:any) {value=link.findObject(\"SHAPE\").parameter1})\r\n    return value\r\n  }\r\n\r\n  function setvalue(node:any,pid:any,val:any){\r\n    node.findLinksOutOf(pid).each( function(link:any) {link.findObject(\"SHAPE\").stroke=val})\r\n  }\r\n\r\n  function setoldvalue(node:any,pid:any,val:any){\r\n    node.findLinksOutOf(pid).each( function(link:any) {link.findObject(\"SHAPE\").parameter1=val})\r\n  }\r\n\r\n  function getinput10(node:any){\r\n    var input = [red,red,red,red,red,red,red,red,red,red]\r\n    \r\n    input[0] = getvalue(node,\"port14\")!\r\n    input[1] = getvalue(node,\"port13\")!\r\n    input[2] = getvalue(node,\"port12\")!\r\n    input[3] = getvalue(node,\"port10\")!\r\n    input[4] = getvalue(node,\"port9\")!\r\n    input[5] = getvalue(node,\"port1\")!\r\n    input[6] = getvalue(node,\"port2\")!\r\n    input[7] = getvalue(node,\"port4\")!\r\n    input[8] = getvalue(node,\"port5\")!\r\n    input[9] = getvalue(node,\"port7\")!\r\n\r\n    return input\r\n  }\r\n\r\n  function getinput8(node:any){\r\n    var input = [red,red,red,red,red,red,red,red]\r\n    \r\n    input[0] = getvalue(node,\"port14\")!\r\n    input[1] = getvalue(node,\"port13\")!\r\n    input[2] = getvalue(node,\"port11\")!\r\n    input[3] = getvalue(node,\"port9\")!\r\n    input[4] = getvalue(node,\"port1\")!\r\n    input[5] = getvalue(node,\"port3\")!\r\n    input[6] = getvalue(node,\"port5\")!\r\n    input[7] = getvalue(node,\"port7\")!\r\n\r\n\r\n    return input\r\n  }\r\n\r\n  function getinputdff(node:any){\r\n    var input = [red,red,red,red,red,red,red,red,red,red]\r\n    \r\n    input[0] = getvalue(node,\"port14\")!\r\n    input[1] = getvalue(node,\"port13\")!\r\n    input[2] = getvalue(node,\"port12\")!\r\n    input[3] = getvalue(node,\"port11\")!\r\n    input[4] = getvalue(node,\"port10\")!\r\n    input[5] = getvalue(node,\"port1\")!\r\n    input[6] = getvalue(node,\"port2\")!\r\n    input[7] = getvalue(node,\"port3\")!\r\n    input[8] = getvalue(node,\"port4\")!\r\n    input[9] = getvalue(node,\"port7\")!\r\n\r\n\r\n    return input\r\n  }\r\n\r\n  function doClk(node:any) {\r\n    if(count%6===0){\r\n      if(node.findObject(\"NODESHAPE\").fill===green){\r\n        node.findObject(\"NODESHAPE\").fill=red\r\n      }\r\n      else{\r\n        node.findObject(\"NODESHAPE\").fill=green\r\n      }\r\n      setOutputLinks(node, node.findObject(\"NODESHAPE\").fill)\r\n    }\r\n\r\n  }\r\n\r\n  function doAnd(node:any) {\r\n    var input = getinput10(node)\r\n\r\n    if(input[0]===green && input[9]===green){ //vcc and gnd must active\r\n\r\n      if(input[1]===green && input[2]===green) {setvalue(node,\"port11\",green);}\r\n      else setvalue(node,\"port11\",red)\r\n\r\n      if(input[3]===green && input[4]===green) {setvalue(node,\"port8\",green);}\r\n      else setvalue(node,\"port8\",red)\r\n\r\n      if(input[5]===green && input[6]===green) {setvalue(node,\"port3\",green);}\r\n      else setvalue(node,\"port3\",red)\r\n\r\n      if(input[7]===green && input[8]===green) {setvalue(node,\"port6\",green);}\r\n      else setvalue(node,\"port6\",red)\r\n\r\n    }\r\n\r\n  }\r\n\r\n  function doNand(node:any) {\r\n    var input = getinput10(node)\r\n\r\n    if(input[0]===green && input[9]===green){ //vcc and gnd must active\r\n\r\n      if(input[1]===green && input[2]===green) {setvalue(node,\"port11\",red);}\r\n      else setvalue(node,\"port11\",green)\r\n\r\n      if(input[3]===green && input[4]===green) {setvalue(node,\"port8\",red);}\r\n      else setvalue(node,\"port8\",green)\r\n\r\n      if(input[5]===green && input[6]===green) {setvalue(node,\"port3\",red);}\r\n      else setvalue(node,\"port3\",green)\r\n\r\n      if(input[7]===green && input[8]===green) {setvalue(node,\"port6\",red);}\r\n      else setvalue(node,\"port6\",green)\r\n\r\n    }\r\n\r\n  }\r\n  function doNot(node:any) {\r\n    var input = getinput8(node)\r\n\r\n    if(input[0]===green && input[7]===green){ //vcc and gnd must active\r\n\r\n      if(input[1]===green) {setvalue(node,\"port12\",red);}\r\n      else setvalue(node,\"port12\",green)\r\n\r\n      if(input[2]===green) {setvalue(node,\"port10\",red);}\r\n      else setvalue(node,\"port10\",green)\r\n\r\n      if(input[3]===green) {setvalue(node,\"port8\",red);}\r\n      else setvalue(node,\"port8\",green)\r\n\r\n      if(input[4]===green) {setvalue(node,\"port2\",red);}\r\n      else setvalue(node,\"port2\",green)\r\n\r\n      if(input[5]===green) {setvalue(node,\"port4\",red);}\r\n      else setvalue(node,\"port4\",green)\r\n\r\n      if(input[6]===green) {setvalue(node,\"port6\",red);}\r\n      else setvalue(node,\"port6\",green)\r\n\r\n    }\r\n\r\n  }\r\n\r\n  function doOr(node:any) {\r\n    var input = getinput10(node)\r\n\r\n    if(input[0]===green && input[9]===green){ //vcc and gnd must active\r\n\r\n      if(input[1]===green || input[2]===green) {setvalue(node,\"port11\",green);}\r\n      else setvalue(node,\"port11\",red)\r\n\r\n      if(input[3]===green || input[4]===green) {setvalue(node,\"port8\",green);}\r\n      else setvalue(node,\"port8\",red)\r\n\r\n      if(input[5]===green || input[6]===green) {setvalue(node,\"port3\",green);}\r\n      else setvalue(node,\"port3\",red)\r\n\r\n      if(input[7]===green || input[8]===green) {setvalue(node,\"port6\",green);}\r\n      else setvalue(node,\"port6\",red)\r\n\r\n    }\r\n\r\n  }\r\n  function doNor(node:any) {\r\n    var input = getinput10(node)\r\n\r\n    if(input[0]===green && input[9]===green){ //vcc and gnd must active\r\n\r\n      if(input[1]===green || input[2]===green) {setvalue(node,\"port11\",red);}\r\n      else setvalue(node,\"port11\",green)\r\n\r\n      if(input[3]===green || input[4]===green) {setvalue(node,\"port8\",red);}\r\n      else setvalue(node,\"port8\",green)\r\n\r\n      if(input[5]===green || input[6]===green) {setvalue(node,\"port3\",red);}\r\n      else setvalue(node,\"port3\",green)\r\n\r\n      if(input[7]===green || input[8]===green) {setvalue(node,\"port6\",red);}\r\n      else setvalue(node,\"port6\",green)\r\n\r\n    }\r\n\r\n  }\r\n\r\n  function doXor(node:any) {\r\n    var input = getinput10(node)\r\n\r\n    if(input[0]===green && input[9]===green){ //vcc and gnd must active\r\n\r\n      if(input[1]===green && input[2]===green) {setvalue(node,\"port11\",red);} \r\n      if(input[1]===green && input[2]===red) {setvalue(node,\"port11\",green);}\r\n      if(input[1]===red && input[2]===green) {setvalue(node,\"port11\",green);}\r\n      if(input[1]===red && input[2]===red) {setvalue(node,\"port11\",red);}\r\n\r\n      if(input[3]===green && input[4]===green) {setvalue(node,\"port8\",red);} \r\n      if(input[3]===green && input[4]===red) {setvalue(node,\"port8\",green);}\r\n      if(input[3]===red && input[4]===green) {setvalue(node,\"port8\",green);}\r\n      if(input[3]===red && input[4]===red) {setvalue(node,\"port8\",red);}\r\n\r\n      if(input[5]===green && input[6]===green) {setvalue(node,\"port3\",red);} \r\n      if(input[5]===green && input[6]===red) {setvalue(node,\"port3\",green);}\r\n      if(input[5]===red && input[6]===green) {setvalue(node,\"port3\",green);}\r\n      if(input[5]===red && input[6]===red) {setvalue(node,\"port3\",red);}\r\n\r\n      if(input[7]===green && input[8]===green) {setvalue(node,\"port6\",red);} \r\n      if(input[7]===green && input[8]===red) {setvalue(node,\"port6\",green);}\r\n      if(input[7]===red && input[8]===green) {setvalue(node,\"port6\",green);}\r\n      if(input[7]===red && input[8]===red) {setvalue(node,\"port6\",red);}\r\n    }\r\n  }\r\n  function doXnor(node:any) {\r\n    var input = getinput10(node)\r\n\r\n    if(input[0]===green && input[9]===green){ //vcc and gnd must active\r\n\r\n      if(input[1]===green && input[2]===green) {setvalue(node,\"port11\",green);} \r\n      if(input[1]===green && input[2]===red) {setvalue(node,\"port11\",red);}\r\n      if(input[1]===red && input[2]===green) {setvalue(node,\"port11\",red);}\r\n      if(input[1]===red && input[2]===red) {setvalue(node,\"port11\",green);}\r\n\r\n      if(input[3]===green && input[4]===green) {setvalue(node,\"port8\",green);} \r\n      if(input[3]===green && input[4]===red) {setvalue(node,\"port8\",red);}\r\n      if(input[3]===red && input[4]===green) {setvalue(node,\"port8\",red);}\r\n      if(input[3]===red && input[4]===red) {setvalue(node,\"port8\",green);}\r\n\r\n      if(input[5]===green && input[6]===green) {setvalue(node,\"port3\",green);} \r\n      if(input[5]===green && input[6]===red) {setvalue(node,\"port3\",red);}\r\n      if(input[5]===red && input[6]===green) {setvalue(node,\"port3\",red);}\r\n      if(input[5]===red && input[6]===red) {setvalue(node,\"port3\",green);}\r\n\r\n      if(input[7]===green && input[8]===green) {setvalue(node,\"port6\",green);} \r\n      if(input[7]===green && input[8]===red) {setvalue(node,\"port6\",red);}\r\n      if(input[7]===red && input[8]===green) {setvalue(node,\"port6\",red);}\r\n      if(input[7]===red && input[8]===red) {setvalue(node,\"port6\",green);}\r\n    }\r\n  }\r\n\r\n  function getinput7seg(node:any){\r\n    var input = [black,black,black,black,black,black,black,black,black,black]\r\n    //console.log(input)\r\n    input[0] = getvalue(node,\"portA\")!\r\n    input[1] = getvalue(node,\"portB\")!\r\n    input[2] = getvalue(node,\"portC\")!\r\n    input[3] = getvalue(node,\"portD\")!\r\n    input[4] = getvalue(node,\"portE\")!\r\n    input[5] = getvalue(node,\"portF\")!\r\n    input[6] = getvalue(node,\"portG\")!\r\n    input[7] = getvalue(node,\"portVcc\")!\r\n    input[8] = getvalue(node,\"portCom\")!\r\n    input[9] = getvalue(node,\"portDP\")!\r\n\r\n    return input\r\n  }\r\n\r\n  function do7seg(node:any){\r\n    var input = getinput7seg(node)\r\n    //console.log(input)\r\n    if(input[7]==green && input[8]==green){\r\n\r\n      if (input[0]==green) {node.findObject(\"A\").fill=red} else {node.findObject(\"A\").fill=black} \r\n      if (input[1]==green) {node.findObject(\"B\").fill=red} else {node.findObject(\"B\").fill=black} \r\n      if (input[2]==green) {node.findObject(\"C\").fill=red} else {node.findObject(\"C\").fill=black} \r\n      if (input[3]==green) {node.findObject(\"D\").fill=red} else {node.findObject(\"D\").fill=black} \r\n      if (input[4]==green) {node.findObject(\"E\").fill=red} else {node.findObject(\"E\").fill=black} \r\n      if (input[5]==green) {node.findObject(\"F\").fill=red} else {node.findObject(\"F\").fill=black} \r\n      if (input[6]==green) {node.findObject(\"G\").fill=red} else {node.findObject(\"G\").fill=black} \r\n      if (input[9]==green) {node.findObject(\"DP\").fill=red} else {node.findObject(\"DP\").fill=black} \r\n    \r\n    }\r\n  }\r\n\r\n  function doDff(node:any) {\r\n    var input = getinputdff(node)\r\n    //console.log(\"hello\")\r\n\r\n    //console.log(getoldvalue(node,\"port9\"))\r\n\r\n    if(input[0]===green && input[9]===green){ //vcc and gnd must active\r\n\r\n      if(input[1]===green){ //check clr\r\n        setvalue(node,\"port9\",red)\r\n        setvalue(node,\"port8\",green)\r\n      }\r\n      else if(input[4]===green){ //check pre\r\n        setvalue(node,\"port9\",green)\r\n        setvalue(node,\"port8\",red)\r\n      }\r\n      else if(input[3]===green){ //check clk change\r\n        //console.log(input)\r\n        if(input[2]===green) {setvalue(node,\"port9\",green)}\r\n        else {setvalue(node,\"port9\",red)}\r\n\r\n        if(input[2]===green) {setvalue(node,\"port8\",red)}\r\n        else setvalue(node,\"port8\",green)\r\n\r\n      }\r\n\r\n      //console.log(input)\r\n\r\n\r\n      //----------------------------------------------\r\n\r\n\r\n\r\n      if(input[5]===green){ //check clr\r\n        setvalue(node,\"port9\",red)\r\n        setvalue(node,\"port8\",green)\r\n      }\r\n      else if(input[8]===green){ //check pre\r\n        setvalue(node,\"port9\",green)\r\n        setvalue(node,\"port8\",red)\r\n      }\r\n      else if(input[7]===green){ //check clk change\r\n\r\n        if(input[6]===green) {setvalue(node,\"port5\",green)}\r\n        else {setvalue(node,\"port5\",red)}\r\n\r\n        if(input[6]===green) {setvalue(node,\"port6\",red)}\r\n        else setvalue(node,\"port6\",green)\r\n\r\n      }\r\n      \r\n      \r\n    }\r\n\r\n  }\r\n\r\n  function doOutput(node:any) {\r\n    // assume there is just one input link\r\n    // we just need to update the node's Shape.fill\r\n    node.linksConnected.each(function(link:any) { node.findObject(\"NODESHAPE\").fill = link.findObject(\"SHAPE\").stroke; });\r\n  }\r\n\r\n  function save() {\r\n    var data = diagram.model.toJson();\r\n    console.log(data);\r\n    diagram.isModified = false;\r\n  }\r\n\r\n  function load(Data: any) {\r\n    diagram.model = go.Model.fromJson(Data);\r\n  }\r\n\r\n  return diagram;\r\n}\r\n\r\n\r\n// render function...\r\nfunction Main() {\r\n\r\n  useEffect(() => {\r\n    document.title = \"Online Simple Circuit\"\r\n  }, []);\r\n\r\n  // for alert when exit page without saving change.\r\n  // (disabled for now because it's so annoy while testing)\r\n  /*window.addEventListener(\"beforeunload\", (ev) => \r\n  {  \r\n    ev.preventDefault();\r\n    return ev.returnValue = 'Are you sure you want to close?';\r\n  });*/\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"absolute flex items-center w-full h-16 bg-black\">\r\n          <button className=\"mx-4 text-white text-4xl\">OSC</button>\r\n          <button className=\"mx-8 text-white text-xl\">New</button>\r\n          <button className=\"mx-8 text-white text-xl\">Load</button>\r\n          <button className=\"mx-8 text-white text-xl\">Save</button>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <div id=\"diagramDiv\" className=\"mt-16 w-4/5 bg-gray-200 relative border-b border-black\">\r\n          <ReactDiagram\r\n            initDiagram={initDiagram}\r\n            divClassName='main-diagram'\r\n            nodeDataArray={[]}\r\n          />\r\n          <div className=\"ml-4\">\r\n            <p>Drag and drop component from the right side</p>\r\n            <div className=\"flex\">\r\n              <h1 className=\"pr-5\">Ctrl+Z to Undo</h1>\r\n              <h1 className=\"pr-5\">Ctrl+Y to Redo</h1>\r\n              <h1>Mouse wheel to zoom in/out</h1>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={{height: \"90vh\"}} className=\"tabs mt-16 w-1/5 flex flex-col bg-white border-l border-b border-black\">\r\n          <div className=\"tab\">\r\n            <input type=\"radio\" id=\"rd1\" name=\"rd\" checked={true}></input>\r\n            <label className=\"tab-label\" htmlFor=\"rd1\">IC Gates</label>\r\n            <div className=\"tab-content\">\r\n              <div id=\"palette\" style={{height: '340px'}}></div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"tab\">\r\n            <input type=\"radio\" id=\"rd2\" name=\"rd\"></input>\r\n            <label className=\"tab-label\" htmlFor=\"rd2\">Others items</label>\r\n            <div className=\"tab-content\">\r\n              <div id=\"palette2\" style={{height: '340px'}}></div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport Main from './components/main';\r\n\r\nconst App = () => {\r\n  return(\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path=\"/main\" component={Main} />\r\n        <Redirect to=\"/main\" />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}